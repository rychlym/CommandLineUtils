{
  "index.html": {
    "href": "index.html",
    "title": "CommandLineUtils",
    "keywords": "CommandLineUtils https://nuget.org/packages/McMaster.Extensions.CommandLineUtils This project is a fork of Microsoft.Extensions.CommandLineUtils , which is no longer under active development . This fork, on the other hand, will continue release updates and take contributions. API Reference See the API Reference for more details. Install Install the NuGet package into your project. PM> Install-Package McMaster.Extensions.CommandLineUtils $ dotnet add package McMaster.Extensions.CommandLineUtils <ItemGroup> <PackageReference Include=\"McMaster.Extensions.CommandLineUtils\" Version=\"2.2.0\" /> </ItemGroup> Pre-release builds and symbols: https://www.myget.org/gallery/natemcmaster/ Usage See samples for more examples. CommandLineApplication is the main entry point for most console apps parsing. There are two primary ways to use this API, using the builder pattern and attributes. Attribute API using System; using McMaster.Extensions.CommandLineUtils; [HelpOption] public class Program { public static int Main(string[] args) => CommandLineApplication.Execute<Program>(args); [Option(Description = \"The subject\")] public string Subject { get; } private void OnExecute() { var subject = Subject ?? \"world\"; Console.WriteLine($\"Hello {subject}!\"); } } Builder API using System; using McMaster.Extensions.CommandLineUtils; public class Program { public static int Main(string[] args) { var app = new CommandLineApplication(); app.HelpOption(); var optionSubject = app.Option(\"-s|--subject <SUBJECT>\", \"The subject\", CommandOptionType.SingleValue); app.OnExecute(() => { var subject = optionSubject.HasValue() ? optionSubject.Value() : \"world\"; Console.WriteLine($\"Hello {subject}!\"); return 0; }); return app.Execute(args); } }"
  },
  "api/McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.VersionOptionFromMemberAttribute.html",
    "title": "Class VersionOptionFromMemberAttribute",
    "keywords": "Class VersionOptionFromMemberAttribute The option used to determine if version info should be displayed. The value for the version information is provided by the properties or members specified. Inheritance System.Object System.Attribute OptionAttributeBase VersionOptionFromMemberAttribute Inherited Members OptionAttributeBase.Template OptionAttributeBase.ShortName OptionAttributeBase.LongName OptionAttributeBase.SymbolName OptionAttributeBase.ValueName OptionAttributeBase.Description OptionAttributeBase.ShowInHelpText OptionAttributeBase.Inherited System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class VersionOptionFromMemberAttribute : OptionAttributeBase Constructors | Improve this Doc View Source VersionOptionFromMemberAttribute() Initializes an instance of VersionOptionFromMemberAttribute with --version as the template. Declaration public VersionOptionFromMemberAttribute() | Improve this Doc View Source VersionOptionFromMemberAttribute(String) Initializes an instance of VersionOptionFromMemberAttribute with --version as the template. Declaration public VersionOptionFromMemberAttribute(string template) Parameters Type Name Description System.String template The version template. Properties | Improve this Doc View Source MemberName The name of the property or method that returns short version information. Declaration public string MemberName { get; set; } Property Value Type Description System.String"
  },
  "api/McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.VersionOptionAttribute.html",
    "title": "Class VersionOptionAttribute",
    "keywords": "Class VersionOptionAttribute The option used to determine if version text should be displayed. Inheritance System.Object System.Attribute OptionAttributeBase VersionOptionAttribute Inherited Members OptionAttributeBase.Template OptionAttributeBase.ShortName OptionAttributeBase.LongName OptionAttributeBase.SymbolName OptionAttributeBase.ValueName OptionAttributeBase.Description OptionAttributeBase.ShowInHelpText OptionAttributeBase.Inherited System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public sealed class VersionOptionAttribute : OptionAttributeBase Constructors | Improve this Doc View Source VersionOptionAttribute(String) Initializes a new VersionOptionAttribute with the template --version . Declaration public VersionOptionAttribute(string version) Parameters Type Name Description System.String version The version | Improve this Doc View Source VersionOptionAttribute(String, String) Initializes a new VersionOptionAttribute . Declaration public VersionOptionAttribute(string template, string version) Parameters Type Name Description System.String template The string template. Template . System.String version The version Properties | Improve this Doc View Source Version The version information to be shown. ShortVersionGetter . Declaration public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/McMaster.Extensions.CommandLineUtils.ValidationExtensions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ValidationExtensions.html",
    "title": "Class ValidationExtensions",
    "keywords": "Class ValidationExtensions Extension methods for adding validation rules to options and arguments. Inheritance System.Object ValidationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class ValidationExtensions Methods | Improve this Doc View Source Accepts(CommandArgument) Creates a builder for specifying a set of rules used to determine if input is valid. Declaration public static IArgumentValidationBuilder Accepts(this CommandArgument argument) Parameters Type Name Description CommandArgument argument The argument. Returns Type Description IArgumentValidationBuilder The builder. | Improve this Doc View Source Accepts(CommandArgument, Action<IArgumentValidationBuilder>) Specifies a set of rules used to determine if input is valid. Declaration public static CommandArgument Accepts(this CommandArgument argument, Action<IArgumentValidationBuilder> configure) Parameters Type Name Description CommandArgument argument The argument. System.Action < IArgumentValidationBuilder > configure A function to configure rules on the validation builder. Returns Type Description CommandArgument The argument. | Improve this Doc View Source Accepts(CommandOption) Creates a builder for specifying a set of rules used to determine if input is valid. Declaration public static IOptionValidationBuilder Accepts(this CommandOption option) Parameters Type Name Description CommandOption option The option. Returns Type Description IOptionValidationBuilder The builder. | Improve this Doc View Source Accepts(CommandOption, Action<IOptionValidationBuilder>) Specifies a set of rules used to determine if input is valid. Declaration public static CommandOption Accepts(this CommandOption option, Action<IOptionValidationBuilder> configure) Parameters Type Name Description CommandOption option The option. System.Action < IOptionValidationBuilder > configure A function to configure rules on the validation builder. Returns Type Description CommandOption The option. | Improve this Doc View Source Accepts<T>(CommandArgument<T>) Creates a builder for specifying a set of rules used to determine if input is valid. Declaration public static IArgumentValidationBuilder<T> Accepts<T>(this CommandArgument<T> argument) Parameters Type Name Description CommandArgument <T> argument The argument. Returns Type Description IArgumentValidationBuilder <T> The builder. Type Parameters Name Description T | Improve this Doc View Source Accepts<T>(CommandArgument<T>, Action<IArgumentValidationBuilder<T>>) Specifies a set of rules used to determine if input is valid. Declaration public static CommandArgument<T> Accepts<T>(this CommandArgument<T> argument, Action<IArgumentValidationBuilder<T>> configure) Parameters Type Name Description CommandArgument <T> argument The argument. System.Action < IArgumentValidationBuilder <T>> configure A function to configure rules on the validation builder. Returns Type Description CommandArgument <T> The argument. Type Parameters Name Description T | Improve this Doc View Source Accepts<T>(CommandOption<T>) Creates a builder for specifying a set of rules used to determine if input is valid. Declaration public static IOptionValidationBuilder<T> Accepts<T>(this CommandOption<T> option) Parameters Type Name Description CommandOption <T> option The option. Returns Type Description IOptionValidationBuilder <T> The builder. Type Parameters Name Description T | Improve this Doc View Source Accepts<T>(CommandOption<T>, Action<IOptionValidationBuilder<T>>) Specifies a set of rules used to determine if input is valid. Declaration public static CommandOption<T> Accepts<T>(this CommandOption<T> option, Action<IOptionValidationBuilder<T>> configure) Parameters Type Name Description CommandOption <T> option The option. System.Action < IOptionValidationBuilder <T>> configure A function to configure rules on the validation builder. Returns Type Description CommandOption <T> The option. Type Parameters Name Description T | Improve this Doc View Source EmailAddress(IValidationBuilder, String) Specifies that values must be a valid email address. Declaration public static IValidationBuilder EmailAddress(this IValidationBuilder builder, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source Enum<TEnum>(IValidationBuilder, Boolean) Specifies that values must be one of the values in a given set. By default, value comparison is case-sensitive. To make matches case-insensitive, set ignoreCase to true . Declaration public static IValidationBuilder Enum<TEnum>(this IValidationBuilder builder, bool ignoreCase = false)where TEnum : struct Parameters Type Name Description IValidationBuilder builder The builder. System.Boolean ignoreCase Ignore case when parsing enums. Returns Type Description IValidationBuilder The builder. Type Parameters Name Description TEnum Exceptions Type Condition System.ArgumentException When TEnum is not an enum. | Improve this Doc View Source ExistingDirectory(IValidationBuilder, String) Specifies that values must be a path to a directory that already exists. Declaration public static IValidationBuilder ExistingDirectory(this IValidationBuilder builder, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source ExistingFile(IValidationBuilder, String) Specifies that values must be a path to a file that already exists. Declaration public static IValidationBuilder ExistingFile(this IValidationBuilder builder, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source ExistingFileOrDirectory(IValidationBuilder, String) Specifies that values must be a valid file path or directory, and the file path must already exist. Declaration public static IValidationBuilder ExistingFileOrDirectory(this IValidationBuilder builder, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source IsRequired(CommandArgument, Boolean, String) Indicates the argument is required. Declaration public static CommandArgument IsRequired(this CommandArgument argument, bool allowEmptyStrings = false, string errorMessage = null) Parameters Type Name Description CommandArgument argument The argument. System.Boolean allowEmptyStrings Indicates whether an empty string is allowed. System.String errorMessage The custom error message to display. See also System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage . Returns Type Description CommandArgument The argument. | Improve this Doc View Source IsRequired(CommandOption, Boolean, String) Indicates the option is required. Declaration public static CommandOption IsRequired(this CommandOption option, bool allowEmptyStrings = false, string errorMessage = null) Parameters Type Name Description CommandOption option The option. System.Boolean allowEmptyStrings Indicates whether an empty string is allowed. System.String errorMessage The custom error message to display. See also System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage . Returns Type Description CommandOption The option. | Improve this Doc View Source LegalFilePath(IValidationBuilder, String) Specifies that values must be legal file paths. Declaration public static IValidationBuilder LegalFilePath(this IValidationBuilder builder, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source MaxLength(IValidationBuilder, Int32, String) Specifies that values must be a string no more than length characters long. Declaration public static IValidationBuilder MaxLength(this IValidationBuilder builder, int length, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder. System.Int32 length The maximum length. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source MinLength(IValidationBuilder, Int32, String) Specifies that values must be a string at least length characters long. Declaration public static IValidationBuilder MinLength(this IValidationBuilder builder, int length, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder System.Int32 length The minimum length. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source OnValidate(CommandArgument, Func<ValidationContext, ValidationResult>) Adds a validator that runs after parsing is complete and before command execution. Declaration public static CommandArgument OnValidate(this CommandArgument argument, Func<ValidationContext, ValidationResult> validate) Parameters Type Name Description CommandArgument argument The argument. System.Func < System.ComponentModel.DataAnnotations.ValidationContext , System.ComponentModel.DataAnnotations.ValidationResult > validate The callback. Return System.ComponentModel.DataAnnotations.ValidationResult.Success if there is no error. Returns Type Description CommandArgument | Improve this Doc View Source OnValidate(CommandLineApplication, Func<ValidationContext, ValidationResult>) Adds a validator that runs after parsing is complete and before command execution. Declaration public static CommandLineApplication OnValidate(this CommandLineApplication command, Func<ValidationContext, ValidationResult> validate) Parameters Type Name Description CommandLineApplication command The command. System.Func < System.ComponentModel.DataAnnotations.ValidationContext , System.ComponentModel.DataAnnotations.ValidationResult > validate The callback. Return System.ComponentModel.DataAnnotations.ValidationResult.Success if there is no error. Returns Type Description CommandLineApplication | Improve this Doc View Source OnValidate(CommandOption, Func<ValidationContext, ValidationResult>) Adds a validator that runs after parsing is complete and before command execution. Declaration public static CommandOption OnValidate(this CommandOption option, Func<ValidationContext, ValidationResult> validate) Parameters Type Name Description CommandOption option The option. System.Func < System.ComponentModel.DataAnnotations.ValidationContext , System.ComponentModel.DataAnnotations.ValidationResult > validate The callback. Return System.ComponentModel.DataAnnotations.ValidationResult.Success if there is no error. Returns Type Description CommandOption | Improve this Doc View Source Range(IValidationBuilder<Double>, Double, Double, String) Specifies that values must be in a given range. Declaration public static IValidationBuilder<double> Range(this IValidationBuilder<double> builder, double minimum, double maximum, string errorMessage = null) Parameters Type Name Description IValidationBuilder < System.Double > builder The builder. System.Double minimum The minimum allowed value. System.Double maximum The maximum allowed value. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder < System.Double > The builder. | Improve this Doc View Source Range(IValidationBuilder<Int32>, Int32, Int32, String) Specifies that values must be in a given range. Declaration public static IValidationBuilder<int> Range(this IValidationBuilder<int> builder, int minimum, int maximum, string errorMessage = null) Parameters Type Name Description IValidationBuilder < System.Int32 > builder The builder. System.Int32 minimum The minimum allowed value. System.Int32 maximum The maximum allowed value. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder < System.Int32 > The builder. | Improve this Doc View Source RegularExpression(IValidationBuilder, String, String) Specifies that values must match a regular expression. Declaration public static IValidationBuilder RegularExpression(this IValidationBuilder builder, string pattern, string errorMessage = null) Parameters Type Name Description IValidationBuilder builder The builder. System.String pattern The regular expression. System.String errorMessage A custom error message to display. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source Satisfies<TAttribute>(IValidationBuilder, String, Object[]) Specifies that values must satisfy the requirements of the validation attribute of type TAttribute . Declaration public static IValidationBuilder Satisfies<TAttribute>(this IValidationBuilder builder, string errorMessage = null, params object[] ctorArgs)where TAttribute : ValidationAttribute Parameters Type Name Description IValidationBuilder builder The builder. System.String errorMessage A custom error message to display. System.Object [] ctorArgs Constructor arguments for TAttribute . Returns Type Description IValidationBuilder The builder. Type Parameters Name Description TAttribute The validation attribute type. | Improve this Doc View Source Values(IValidationBuilder, Boolean, String[]) Specifies that values must be one of the values in a given set. Declaration public static IValidationBuilder Values(this IValidationBuilder builder, bool ignoreCase, params string[] allowedValues) Parameters Type Name Description IValidationBuilder builder The builder. System.Boolean ignoreCase Ignore case when comparing inputs to allowedValues . System.String [] allowedValues Allowed values. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source Values(IValidationBuilder, String[]) Specifies that values must be one of the values in a given set. By default, value comparison is case-sensitive. To make matches case-insensitive, use Values(IValidationBuilder, Boolean, String[]) . Declaration public static IValidationBuilder Values(this IValidationBuilder builder, params string[] allowedValues) Parameters Type Name Description IValidationBuilder builder The builder. System.String [] allowedValues Allowed values. Returns Type Description IValidationBuilder The builder. | Improve this Doc View Source Values(IValidationBuilder, StringComparison, String[]) Specifies that values must be one of the values in a given set. Declaration public static IValidationBuilder Values(this IValidationBuilder builder, StringComparison comparer, params string[] allowedValues) Parameters Type Name Description IValidationBuilder builder The builder. System.StringComparison comparer The comparer used to determine if values match. System.String [] allowedValues Allowed values. Returns Type Description IValidationBuilder The builder."
  },
  "api/McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Abstractions.CommandLineContext.html",
    "title": "Class CommandLineContext",
    "keywords": "Class CommandLineContext Contains information about the execution context of the command-line application. Inheritance System.Object CommandLineContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Abstractions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public abstract class CommandLineContext Properties | Improve this Doc View Source Arguments The arguments as provided in Program.Main. Declaration public string[] Arguments { get; protected set; } Property Value Type Description System.String [] Remarks Cannot be null. | Improve this Doc View Source Console The console. Declaration public IConsole Console { get; protected set; } Property Value Type Description IConsole Remarks Cannot be null. | Improve this Doc View Source WorkingDirectory The current working directory. Defaults to System.IO.Directory.GetCurrentDirectory Declaration public string WorkingDirectory { get; protected set; } Property Value Type Description System.String Remarks Cannot be null, and must be an absolute file path."
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpText.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpText.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils.HelpText",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils.HelpText Classes DefaultHelpTextGenerator A default implementation of help text generation. Interfaces IHelpTextGenerator Generates help text for a command line application."
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpText.IHelpTextGenerator.html",
    "title": "Interface IHelpTextGenerator",
    "keywords": "Interface IHelpTextGenerator Generates help text for a command line application. Namespace : McMaster.Extensions.CommandLineUtils.HelpText Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IHelpTextGenerator Methods | Improve this Doc View Source Generate(CommandLineApplication, TextWriter) Generate help text for the application. Declaration void Generate(CommandLineApplication application, TextWriter output) Parameters Type Name Description CommandLineApplication application System.IO.TextWriter output"
  },
  "api/McMaster.Extensions.CommandLineUtils.DirectoryExistsAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.DirectoryExistsAttribute.html",
    "title": "Class DirectoryExistsAttribute",
    "keywords": "Class DirectoryExistsAttribute Specifies that the data must be an already existing directory, not a file. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute FilePathExistsAttributeBase DirectoryExistsAttribute Inherited Members FilePathExistsAttributeBase.IsValid(Object, ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class DirectoryExistsAttribute : FilePathExistsAttributeBase Constructors | Improve this Doc View Source DirectoryExistsAttribute() Initializes an instance of FileExistsAttribute . Declaration public DirectoryExistsAttribute()"
  },
  "api/McMaster.Extensions.CommandLineUtils.DebugHelper.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.DebugHelper.html",
    "title": "Class DebugHelper",
    "keywords": "Class DebugHelper Helps handle debug command-line arguments. Inheritance System.Object DebugHelper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class DebugHelper Methods | Improve this Doc View Source HandleDebugSwitch(ref String[]) Pauses the application for the debugger when '--debug' is passed in. Declaration public static void HandleDebugSwitch(ref string[] args) Parameters Type Name Description System.String [] args The command line arguments"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandAttribute.html",
    "title": "Class CommandAttribute",
    "keywords": "Class CommandAttribute Represents a command line application using attributes to define options and arguments. Inheritance System.Object System.Attribute CommandAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Class)] public sealed class CommandAttribute : Attribute Constructors | Improve this Doc View Source CommandAttribute() Initializes a new CommandAttribute . Declaration public CommandAttribute() | Improve this Doc View Source CommandAttribute(String) Initializes a new CommandAttribute . Declaration public CommandAttribute(string name) Parameters Type Name Description System.String name The name of the command. Properties | Improve this Doc View Source AllowArgumentSeparator Allow '--' to be used to stop parsing arguments. AllowArgumentSeparator Declaration public bool AllowArgumentSeparator { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Description A description of the command. Description Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source ExtendedHelpText Additional text that appears at the bottom of generated help text. ExtendedHelpText Declaration public string ExtendedHelpText { get; set; } Property Value Type Description System.String | Improve this Doc View Source FullName The full name of the command line application to show in help text. FullName Declaration public string FullName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The name of the command line application. When this is a subcommand, it is the name of the word used to invoke the subcommand. Name Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source OptionsComparison The way arguments and options are matched. Declaration public StringComparison OptionsComparison { get; set; } Property Value Type Description System.StringComparison | Improve this Doc View Source ParseCulture Specifies the culture used to convert values into types. Declaration public CultureInfo ParseCulture { get; set; } Property Value Type Description System.Globalization.CultureInfo | Improve this Doc View Source ResponseFileHandling Treat arguments beginning as &apos;@' as a response file. ResponseFileHandling Declaration public ResponseFileHandling ResponseFileHandling { get; set; } Property Value Type Description ResponseFileHandling | Improve this Doc View Source ShowInHelpText Determines if this command appears in generated help text. ShowInHelpText Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ThrowOnUnexpectedArgument Throw when unexpected arguments are encountered. ThrowOnUnexpectedArgument Declaration public bool ThrowOnUnexpectedArgument { get; set; } Property Value Type Description System.Boolean"
  },
  "api/McMaster.Extensions.CommandLineUtils.ArgumentEscaper.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ArgumentEscaper.html",
    "title": "Class ArgumentEscaper",
    "keywords": "Class ArgumentEscaper A utility for escaping arguments for new processes. Inheritance System.Object ArgumentEscaper Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class ArgumentEscaper Methods | Improve this Doc View Source EscapeAndConcatenate(IEnumerable<String>) Undo the processing which took place to create string[] args in Main, so that the next process will receive the same string[] args. Declaration public static string EscapeAndConcatenate(IEnumerable<string> args) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > args The arguments Returns Type Description System.String A single string of escaped arguments Remarks See https://blogs.msdn.microsoft.com/twistylittlepassagesallalike/2011/04/23/everyone-quotes-command-line-arguments-the-wrong-way/"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidator.html",
    "title": "Interface IOptionValidator",
    "keywords": "Interface IOptionValidator Provides validation for a CommandOption . Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IOptionValidator Methods | Improve this Doc View Source GetValidationResult(CommandOption, ValidationContext) Validates the values specified for Values . Declaration ValidationResult GetValidationResult(CommandOption option, ValidationContext context) Parameters Type Name Description CommandOption option The option. System.ComponentModel.DataAnnotations.ValidationContext context The validation context. Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult The validation result. Returns System.ComponentModel.DataAnnotations.ValidationResult.Success if the values pass validation."
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder.html",
    "title": "Interface IOptionValidationBuilder",
    "keywords": "Interface IOptionValidationBuilder Creates a collection of validators for CommandOption . Inherited Members IValidationBuilder.Use(IValidator) Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IOptionValidationBuilder : IValidationBuilder Remarks Custom validation extension methods that only apply to CommandOption should hang off this type. Methods | Improve this Doc View Source Use(IOptionValidator) Use the given IOptionValidator . Declaration void Use(IOptionValidator validator) Parameters Type Name Description IOptionValidator validator The validator. Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpText.DefaultHelpTextGenerator.html",
    "title": "Class DefaultHelpTextGenerator",
    "keywords": "Class DefaultHelpTextGenerator A default implementation of help text generation. Inheritance System.Object DefaultHelpTextGenerator Implements IHelpTextGenerator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.HelpText Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class DefaultHelpTextGenerator : IHelpTextGenerator Properties | Improve this Doc View Source Singleton A singleton instance of DefaultHelpTextGenerator . Declaration public static DefaultHelpTextGenerator Singleton { get; } Property Value Type Description DefaultHelpTextGenerator Methods | Improve this Doc View Source Generate(CommandLineApplication, TextWriter) Generate help text for the application. Declaration public void Generate(CommandLineApplication application, TextWriter output) Parameters Type Name Description CommandLineApplication application System.IO.TextWriter output Implements IHelpTextGenerator"
  },
  "api/McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.HelpOptionAttribute.html",
    "title": "Class HelpOptionAttribute",
    "keywords": "Class HelpOptionAttribute The option used to determine if help text should be displayed. This should only be used once per command line app. Inheritance System.Object System.Attribute OptionAttributeBase HelpOptionAttribute Inherited Members OptionAttributeBase.Template OptionAttributeBase.ShortName OptionAttributeBase.LongName OptionAttributeBase.SymbolName OptionAttributeBase.ValueName OptionAttributeBase.Description OptionAttributeBase.ShowInHelpText OptionAttributeBase.Inherited System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Property)] public sealed class HelpOptionAttribute : OptionAttributeBase Constructors | Improve this Doc View Source HelpOptionAttribute() Initializes a new HelpOptionAttribute with the template -?|-h|--help . Declaration public HelpOptionAttribute() | Improve this Doc View Source HelpOptionAttribute(String) Initializes a new HelpOptionAttribute . Declaration public HelpOptionAttribute(string template) Parameters Type Name Description System.String template The string template. Template ."
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.RemainingArgsPropertyConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.RemainingArgsPropertyConvention.html",
    "title": "Class RemainingArgsPropertyConvention",
    "keywords": "Class RemainingArgsPropertyConvention Sets a property named RemainingArguments or RemainingArgs on the model type on CommandLineApplication<TModel> to the value of RemainingArguments . Inheritance System.Object RemainingArgsPropertyConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class RemainingArgsPropertyConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.ConventionContext.html",
    "title": "Class ConventionContext",
    "keywords": "Class ConventionContext The context in which a convention is applied. Inheritance System.Object ConventionContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ConventionContext Constructors | Improve this Doc View Source ConventionContext(CommandLineApplication, Type) Initializes an instance of ConventionContext . Declaration public ConventionContext(CommandLineApplication application, Type modelType) Parameters Type Name Description CommandLineApplication application The application System.Type modelType The type of the model. Properties | Improve this Doc View Source Application The application to which the convention is applied. Declaration public CommandLineApplication Application { get; } Property Value Type Description CommandLineApplication | Improve this Doc View Source ModelAccessor A convenience accessor for getting the application model object. Can be null when applied to CommandLineApplication instead of CommandLineApplication<TModel> . Declaration public IModelAccessor ModelAccessor { get; } Property Value Type Description IModelAccessor | Improve this Doc View Source ModelType The type of the application model. Can be null when applied to CommandLineApplication instead of CommandLineApplication<TModel> . Declaration public Type ModelType { get; } Property Value Type Description System.Type"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandLineApplicationExtensions.html",
    "title": "Class CommandLineApplicationExtensions",
    "keywords": "Class CommandLineApplicationExtensions Helper methods for CommandLineApplication . Inheritance System.Object CommandLineApplicationExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class CommandLineApplicationExtensions Methods | Improve this Doc View Source Argument<T>(CommandLineApplication, String, String, Boolean) Adds a command line argument with values that should be parsable into T . Declaration public static CommandArgument<T> Argument<T>(this CommandLineApplication app, string name, string description, bool multipleValues = false) Parameters Type Name Description CommandLineApplication app System.String name System.String description System.Boolean multipleValues Returns Type Description CommandArgument <T> Type Parameters Name Description T | Improve this Doc View Source HelpOption(CommandLineApplication) Adds the help option with the template -?|-h|--help . Declaration public static CommandOption HelpOption(this CommandLineApplication app) Parameters Type Name Description CommandLineApplication app Returns Type Description CommandOption | Improve this Doc View Source HelpOption(CommandLineApplication, Boolean) Adds the help option with the template -?|-h|--help . Declaration public static CommandOption HelpOption(this CommandLineApplication app, bool inherited) Parameters Type Name Description CommandLineApplication app System.Boolean inherited Returns Type Description CommandOption | Improve this Doc View Source OnExecute(CommandLineApplication, Action) Sets Invoke with a return code of 0 . Declaration public static void OnExecute(this CommandLineApplication app, Action action) Parameters Type Name Description CommandLineApplication app System.Action action An action to invoke when the command is selected. | Improve this Doc View Source OnExecute(CommandLineApplication, Func<Task>) Sets Invoke with a return code of 0 . Declaration public static void OnExecute(this CommandLineApplication app, Func<Task> action) Parameters Type Name Description CommandLineApplication app System.Func < System.Threading.Tasks.Task > action An asynchronous action to invoke when the ocmmand is selected.. | Improve this Doc View Source OnValidationError(CommandLineApplication, Action<ValidationResult>) Sets an action to invoke, but only when there is a validation error. Declaration public static void OnValidationError(this CommandLineApplication app, Action<ValidationResult> action) Parameters Type Name Description CommandLineApplication app System.Action < System.ComponentModel.DataAnnotations.ValidationResult > action | Improve this Doc View Source OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>) Sets an action to invoke, but only when there is a validation error. Declaration public static void OnValidationError(this CommandLineApplication app, Func<ValidationResult, int> action) Parameters Type Name Description CommandLineApplication app System.Func < System.ComponentModel.DataAnnotations.ValidationResult , System.Int32 > action | Improve this Doc View Source Option<T>(CommandLineApplication, String, String, CommandOptionType) Adds a command-line option with values that should be parsable into T . Declaration public static CommandOption<T> Option<T>(this CommandLineApplication app, string template, string description, CommandOptionType optionType) Parameters Type Name Description CommandLineApplication app System.String template System.String description CommandOptionType optionType Returns Type Description CommandOption <T> Type Parameters Name Description T | Improve this Doc View Source Option<T>(CommandLineApplication, String, String, CommandOptionType, Action<CommandOption>) Adds a command-line option with values that should be parsable into T . Declaration public static CommandOption<T> Option<T>(this CommandLineApplication app, string template, string description, CommandOptionType optionType, Action<CommandOption> configuration) Parameters Type Name Description CommandLineApplication app System.String template System.String description CommandOptionType optionType System.Action < CommandOption > configuration Returns Type Description CommandOption <T> Type Parameters Name Description T | Improve this Doc View Source Option<T>(CommandLineApplication, String, String, CommandOptionType, Boolean) Adds a command-line option with values that should be parsable into T . Declaration public static CommandOption<T> Option<T>(this CommandLineApplication app, string template, string description, CommandOptionType optionType, bool inherited) Parameters Type Name Description CommandLineApplication app System.String template System.String description CommandOptionType optionType System.Boolean inherited Returns Type Description CommandOption <T> Type Parameters Name Description T | Improve this Doc View Source VerboseOption(CommandLineApplication) Adds the verbose option with the template -v|--verbose . Declaration public static CommandOption VerboseOption(this CommandLineApplication app) Parameters Type Name Description CommandLineApplication app Returns Type Description CommandOption | Improve this Doc View Source VerboseOption(CommandLineApplication, String) Adds the verbose option with the template -v|--verbose . Declaration public static CommandOption VerboseOption(this CommandLineApplication app, string template) Parameters Type Name Description CommandLineApplication app System.String template Returns Type Description CommandOption | Improve this Doc View Source VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly) Finds System.Reflection.AssemblyInformationalVersionAttribute on assembly and uses that to set OptionVersion . Uses the Version that is part of the System.Reflection.AssemblyName of the specified assembly if no System.Reflection.AssemblyInformationalVersionAttribute is applied. Declaration public static CommandOption VersionOptionFromAssemblyAttributes(this CommandLineApplication app, Assembly assembly) Parameters Type Name Description CommandLineApplication app System.Reflection.Assembly assembly Returns Type Description CommandOption Exceptions Type Condition System.ArgumentNullException Either app or assembly is null . | Improve this Doc View Source VersionOptionFromAssemblyAttributes(CommandLineApplication, String, Assembly) Finds System.Reflection.AssemblyInformationalVersionAttribute on assembly and uses that to set OptionVersion . Uses the Version that is part of the System.Reflection.AssemblyName of the specified assembly if no System.Reflection.AssemblyInformationalVersionAttribute is applied. Declaration public static CommandOption VersionOptionFromAssemblyAttributes(CommandLineApplication app, string template, Assembly assembly) Parameters Type Name Description CommandLineApplication app System.String template System.Reflection.Assembly assembly Returns Type Description CommandOption Exceptions Type Condition System.ArgumentNullException Either app or assembly is null ."
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder-1.html",
    "title": "Class ValidationBuilder<T>",
    "keywords": "Class ValidationBuilder<T> Default implementation of IOptionValidationBuilder<T> and IArgumentValidationBuilder<T> . Inheritance System.Object ValidationBuilder ValidationBuilder<T> Implements IArgumentValidationBuilder <T> IArgumentValidationBuilder IOptionValidationBuilder <T> IOptionValidationBuilder IValidationBuilder <T> IValidationBuilder Inherited Members ValidationBuilder.Use(IValidator) ValidationBuilder.IArgumentValidationBuilder.Use(IArgumentValidator) ValidationBuilder.IOptionValidationBuilder.Use(IOptionValidator) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ValidationBuilder<T> : ValidationBuilder, IArgumentValidationBuilder<T>, IArgumentValidationBuilder, IOptionValidationBuilder<T>, IOptionValidationBuilder, IValidationBuilder<T>, IValidationBuilder Type Parameters Name Description T Constructors | Improve this Doc View Source ValidationBuilder(CommandArgument<T>) Creates a new instance of ValidationBuilder for a given CommandArgument<T> . Declaration public ValidationBuilder(CommandArgument<T> argument) Parameters Type Name Description CommandArgument <T> argument The argument. | Improve this Doc View Source ValidationBuilder(CommandOption<T>) Creates a new instance of ValidationBuilder for a given CommandOption<T> . Declaration public ValidationBuilder(CommandOption<T> option) Parameters Type Name Description CommandOption <T> option The option. Implements IArgumentValidationBuilder<T> IArgumentValidationBuilder IOptionValidationBuilder<T> IOptionValidationBuilder IValidationBuilder<T> IValidationBuilder Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IValidator.html",
    "title": "Interface IValidator",
    "keywords": "Interface IValidator Provides validation for CommandArgument and CommandOption . Inherited Members IOptionValidator.GetValidationResult(CommandOption, ValidationContext) IArgumentValidator.GetValidationResult(CommandArgument, ValidationContext) Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IValidator : IOptionValidator, IArgumentValidator"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder-1.html",
    "title": "Interface IArgumentValidationBuilder<T>",
    "keywords": "Interface IArgumentValidationBuilder<T> Creates a collection of validators for CommandArgument<T> . Inherited Members IArgumentValidationBuilder.Use(IArgumentValidator) IValidationBuilder.Use(IValidator) Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IArgumentValidationBuilder<T> : IArgumentValidationBuilder, IValidationBuilder<T>, IValidationBuilder Type Parameters Name Description T Remarks Custom validation extension methods that only apply to CommandArgument<T> should hang off this type. Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.FilePathExistsAttributeBase.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.FilePathExistsAttributeBase.html",
    "title": "Class FilePathExistsAttributeBase",
    "keywords": "Class FilePathExistsAttributeBase Base type for attributes that check for existing files or directories. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute FilePathExistsAttributeBase DirectoryExistsAttribute FileExistsAttribute FileOrDirectoryExistsAttribute Inherited Members System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property)] public abstract class FilePathExistsAttributeBase : ValidationAttribute Methods | Improve this Doc View Source IsValid(Object, ValidationContext) Declaration protected override ValidationResult IsValid(object value, ValidationContext validationContext) Parameters Type Name Description System.Object value System.ComponentModel.DataAnnotations.ValidationContext validationContext Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)"
  },
  "api/McMaster.Extensions.CommandLineUtils.ResponseFileHandling.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ResponseFileHandling.html",
    "title": "Enum ResponseFileHandling",
    "keywords": "Enum ResponseFileHandling Specifies options for how to handle response files. The parser treats arguments beginning with &apos;@' as a file path to a response file. A response file contains additional arguments that will be treated as if they were passed in on the command line. Response files can have comments that begin with the # symbol. You cannot use the backslash character () to concatenate lines. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public enum ResponseFileHandling Fields Name Description Disabled Do not parse response files or treat arguments with &apos;@' as a response file ParseArgsAsLineSeparated Each line in the file is treated as an argument, regardless of whitespace on the line. Lines beginning with # are skipped. ParseArgsAsSpaceSeparated Multiple arguments may appear on one line. Arguments are separate by spaces. Double and single quotes can be used to wrap arguments containing spaces."
  },
  "api/McMaster.Extensions.CommandLineUtils.Prompt.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Prompt.html",
    "title": "Class Prompt",
    "keywords": "Class Prompt Utilities for getting input from an interactive console. Inheritance System.Object Prompt Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class Prompt Methods | Improve this Doc View Source GetInt(String, Nullable<Int32>, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets an integer response from the console after displaying a prompt . Declaration public static int GetInt(string prompt, int? defaultAnswer = default (int? ), ConsoleColor? promptColor = default (ConsoleColor? ), ConsoleColor? promptBgColor = default (ConsoleColor? )) Parameters Type Name Description System.String prompt The question to display on the command line System.Nullable < System.Int32 > defaultAnswer If the user provides an empty response, which value should be returned System.Nullable < System.ConsoleColor > promptColor The console color to display System.Nullable < System.ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.Int32 The response as a number | Improve this Doc View Source GetPassword(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a response that contains a password. Input is masked with an asterisk. Declaration public static string GetPassword(string prompt, ConsoleColor? promptColor = default (ConsoleColor? ), ConsoleColor? promptBgColor = default (ConsoleColor? )) Parameters Type Name Description System.String prompt The question to display on command line System.Nullable < System.ConsoleColor > promptColor The console color to use for the prompt System.Nullable < System.ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.String The password as plaintext. Can be null or empty. | Improve this Doc View Source GetPasswordAsSecureString(String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a response as a SecureString object. Input is masked with an asterisk. Declaration public static SecureString GetPasswordAsSecureString(string prompt, ConsoleColor? promptColor = default (ConsoleColor? ), ConsoleColor? promptBgColor = default (ConsoleColor? )) Parameters Type Name Description System.String prompt The question to display on the command line System.Nullable < System.ConsoleColor > promptColor The console color to use for the prompt System.Nullable < System.ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.Security.SecureString A finalized SecureString object, may be empty. | Improve this Doc View Source GetString(String, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a console response from the console after displaying a prompt . Declaration public static string GetString(string prompt, string defaultValue = null, ConsoleColor? promptColor = default (ConsoleColor? ), ConsoleColor? promptBgColor = default (ConsoleColor? )) Parameters Type Name Description System.String prompt The question to display on command line System.String defaultValue If the user enters a blank response, return this value instead. System.Nullable < System.ConsoleColor > promptColor The console color to use for the prompt System.Nullable < System.ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.String The response the user gave. Can be null or empty | Improve this Doc View Source GetYesNo(String, Boolean, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Gets a yes/no response from the console after displaying a prompt . The parsing is case insensitive. Valid responses include: yes, no, y, n. Declaration public static bool GetYesNo(string prompt, bool defaultAnswer, ConsoleColor? promptColor = default (ConsoleColor? ), ConsoleColor? promptBgColor = default (ConsoleColor? )) Parameters Type Name Description System.String prompt The question to display on the command line System.Boolean defaultAnswer If the user provides an empty response, which value should be returned System.Nullable < System.ConsoleColor > promptColor The console color to display System.Nullable < System.ConsoleColor > promptBgColor The console background color for the prompt Returns Type Description System.Boolean True is 'yes'"
  },
  "api/McMaster.Extensions.CommandLineUtils.IReporter.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.IReporter.html",
    "title": "Interface IReporter",
    "keywords": "Interface IReporter Gathers messages with levels. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IReporter Methods | Improve this Doc View Source Error(String) Report an error. Declaration void Error(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Output(String) Report console output. Declaration void Output(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Verbose(String) Report a verbose message. Declaration void Verbose(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Warn(String) Report a warning. Declaration void Warn(string message) Parameters Type Name Description System.String message"
  },
  "docs/intro.html": {
    "href": "docs/intro.html",
    "title": "Introduction",
    "keywords": "Introduction CommandLineUtils is a library which helps developers implement command line applications. The primary goal of the library is to assist with parsing command line arguments and executing the correct commands related to those arguments. However, the library also provides various other utilities such as input helpers. Installation CommandLineUtils can be added to your project using NuGet in any one of the following ways: Using the Package Manager Console : PM> Install-Package McMaster.Extensions.CommandLineUtils Using the dotnet CLI : $ dotnet add package McMaster.Extensions.CommandLineUtils Editing your .csproj file directly: <ItemGroup> <PackageReference Include=\"McMaster.Extensions.CommandLineUtils\" Version=\"2.2.0\" /> </ItemGroup> Your first console application CommandLineApplication is the main entry point for most console apps parsing. There are two primary ways to use this API, using attributes or the builder pattern. Using Attributes using System; using McMaster.Extensions.CommandLineUtils; [HelpOption] public class Program { public static int Main(string[] args) => CommandLineApplication.Execute<Program>(args); [Option(Description = \"The subject\")] public string Subject { get; } private void OnExecute() { var subject = Subject ?? \"world\"; Console.WriteLine($\"Hello {subject}!\"); } } Using the Builder Pattern using System; using McMaster.Extensions.CommandLineUtils; public class Program { public static int Main(string[] args) { var app = new CommandLineApplication(); app.HelpOption(); var optionSubject = app.Option(\"-s|--subject <SUBJECT>\", \"The subject\", CommandOptionType.SingleValue); app.OnExecute(() => { var subject = optionSubject.HasValue() ? optionSubject.Value() : \"world\"; Console.WriteLine($\"Hello {subject}!\"); return 0; }); return app.Execute(args); } } More information For more information, you can refer to the sample applications."
  },
  "api/McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Abstractions.ParseResult.html",
    "title": "Class ParseResult",
    "keywords": "Class ParseResult The result of parsing command line arguments. Inheritance System.Object ParseResult Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Abstractions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ParseResult Properties | Improve this Doc View Source SelectedCommand The application or subcommand that matches the command line arguments. Declaration public CommandLineApplication SelectedCommand { get; set; } Property Value Type Description CommandLineApplication | Improve this Doc View Source ValidationResult The result of executing all valiation on selected options and arguments. Declaration public ValidationResult ValidationResult { get; set; } Property Value Type Description System.ComponentModel.DataAnnotations.ValidationResult"
  },
  "api/McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Abstractions.ValueParserProvider.html",
    "title": "Class ValueParserProvider",
    "keywords": "Class ValueParserProvider A store of value parsers that are used to convert argument values from strings to types. Inheritance System.Object ValueParserProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Abstractions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ValueParserProvider Properties | Improve this Doc View Source ParseCulture Gets or sets the CultureInfo which is used to convert argument values to types. Declaration public CultureInfo ParseCulture { get; set; } Property Value Type Description System.Globalization.CultureInfo Remarks The default value is System.Globalization.CultureInfo.CurrentCulture . Methods | Improve this Doc View Source Add(IValueParser) Add a new value parser to the provider. Declaration public void Add(IValueParser parser) Parameters Type Name Description IValueParser parser An instance of the parser that is used to convert an argument from a string. Exceptions Type Condition System.ArgumentException A value parser with the same TargetType is already registered. System.ArgumentNullException parser is null. | Improve this Doc View Source AddOrReplace(IValueParser) Add a new value parser to the provider, or if a value provider already exists for TargetType then replaces it with parser . Declaration public void AddOrReplace(IValueParser parser) Parameters Type Name Description IValueParser parser An instance of the parser that is used to convert an argument from a string. Exceptions Type Condition System.ArgumentNullException parser is null. | Improve this Doc View Source AddRange(IEnumerable<IValueParser>) Add collection of a new value parsers to the provider. Declaration public void AddRange(IEnumerable<IValueParser> parsers) Parameters Type Name Description System.Collections.Generic.IEnumerable < IValueParser > parsers The collection whose parsers should be added. Exceptions Type Condition System.ArgumentException A value parser with the same TargetType is already registered. System.ArgumentNullException parsers is null."
  },
  "api/McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser-1.html",
    "title": "Interface IValueParser<T>",
    "keywords": "Interface IValueParser<T> A parser that can convert string into T . Inherited Members IValueParser.TargetType Namespace : McMaster.Extensions.CommandLineUtils.Abstractions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IValueParser<T> : IValueParser Type Parameters Name Description T Methods | Improve this Doc View Source Parse(String, String, CultureInfo) Parses the raw string value. Declaration T Parse(string argName, string value, CultureInfo culture) Parameters Type Name Description System.String argName The name of the argument this value will be bound to. System.String value The raw string value to parse. System.Globalization.CultureInfo culture The culture that should be used to parse values. Returns Type Description T The parsed value object."
  },
  "api/McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ConventionBuilderExtensions.html",
    "title": "Class ConventionBuilderExtensions",
    "keywords": "Class ConventionBuilderExtensions Methods for adding commonly used conventions Inheritance System.Object ConventionBuilderExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class ConventionBuilderExtensions Methods | Improve this Doc View Source SetAppNameFromEntryAssembly(IConventionBuilder) Sets Name to match the name of System.Reflection.Assembly.GetEntryAssembly Declaration public static IConventionBuilder SetAppNameFromEntryAssembly(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source SetParentPropertyOnModel(IConventionBuilder) Sets a property named \"Parent\" on the model type to the value of the model of the parent command. Declaration public static IConventionBuilder SetParentPropertyOnModel(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source SetRemainingArgsPropertyOnModel(IConventionBuilder) Sets a property named \"RemainingArgs\" or \"RemainingArguments\" on the model type to the value of RemainingArguments . Declaration public static IConventionBuilder SetRemainingArgsPropertyOnModel(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source SetSubcommandPropertyOnModel(IConventionBuilder) Sets a property named \"Subcommand\" on the model type to the value of the model of the selected subcommand. Declaration public static IConventionBuilder SetSubcommandPropertyOnModel(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseArgumentAttributes(IConventionBuilder) Applies settings from ArgumentAttribute on the model type. Declaration public static IConventionBuilder UseArgumentAttributes(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseAttributes(IConventionBuilder) Applies a collection of default conventions, such as applying options in attributes on the model type, Declaration public static IConventionBuilder UseAttributes(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseCommandAttribute(IConventionBuilder) Applies settings from CommandAttribute on the model type. Declaration public static IConventionBuilder UseCommandAttribute(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseConstructorInjection(IConventionBuilder) Enables using constructor injection to initialize the model type. Declaration public static IConventionBuilder UseConstructorInjection(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder Returns Type Description IConventionBuilder | Improve this Doc View Source UseConstructorInjection(IConventionBuilder, IServiceProvider) Enables using constructor injection to initialize the model type. Declaration public static IConventionBuilder UseConstructorInjection(this IConventionBuilder builder, IServiceProvider additionalServices) Parameters Type Name Description IConventionBuilder builder System.IServiceProvider additionalServices Additional services that should be passed to the service provider. Returns Type Description IConventionBuilder | Improve this Doc View Source UseDefaultConventions(IConventionBuilder) Applies a collection of default conventions, such as applying options in attributes on the model type, Declaration public static IConventionBuilder UseDefaultConventions(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseHelpOptionAttribute(IConventionBuilder) Applies settings from HelpOptionAttribute on the model type. Declaration public static IConventionBuilder UseHelpOptionAttribute(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseOnExecuteMethodFromModel(IConventionBuilder) Sets a method named \"OnExecute\" or \"OnExecuteAsync\" on the model type to handle Invoke Declaration public static IConventionBuilder UseOnExecuteMethodFromModel(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseOnValidateMethodFromModel(IConventionBuilder) Invokes a method named \"OnValidate\" on the model type after parsing. Declaration public static IConventionBuilder UseOnValidateMethodFromModel(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseOnValidationErrorMethodFromModel(IConventionBuilder) Invokes a method named \"OnValidationError\" on the model type when validation fails. Declaration public static IConventionBuilder UseOnValidationErrorMethodFromModel(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseOptionAttributes(IConventionBuilder) Applies settings from OptionAttribute on the model type. Declaration public static IConventionBuilder UseOptionAttributes(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseSubcommandAttributes(IConventionBuilder) Adds subcommands for each SubcommandAttribute on the model type. Declaration public static IConventionBuilder UseSubcommandAttributes(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseVersionOptionAttribute(IConventionBuilder) Applies settings from VersionOptionAttribute on the model type. Declaration public static IConventionBuilder UseVersionOptionAttribute(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder. | Improve this Doc View Source UseVersionOptionFromMemberAttribute(IConventionBuilder) Applies settings from VersionOptionFromMemberAttribute on the model type. Declaration public static IConventionBuilder UseVersionOptionFromMemberAttribute(this IConventionBuilder builder) Parameters Type Name Description IConventionBuilder builder The builder. Returns Type Description IConventionBuilder The builder."
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandOptionType.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandOptionType.html",
    "title": "Enum CommandOptionType",
    "keywords": "Enum CommandOptionType Defines the kinds of inputs CommandOption accepts. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public enum CommandOptionType Fields Name Description MultipleValue The option can be specified multiple times. Example input: --letter A --letter B --letter C NoValue The option can only be specified once, and does not have a value. Example input: --no-commit SingleOrNoValue The option can only be specified once, and may or may not have a value. To disambiguate this from NoValue , values provided cannot be space-separated from the option name, but must use '=' or ':' Example input: --log Example input: --log:verbose SingleValue The option can only be specified once. Example input: --letter A Example input: --letter=A Example input: --letter:A"
  },
  "api/McMaster.Extensions.CommandLineUtils.ValidateMethodConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ValidateMethodConvention.html",
    "title": "Class ValidateMethodConvention",
    "keywords": "Class ValidateMethodConvention Invokes a method named \"OnValidate\" on the model type after parsing. Inheritance System.Object ValidateMethodConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ValidateMethodConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.SubcommandAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.SubcommandAttribute.html",
    "title": "Class SubcommandAttribute",
    "keywords": "Class SubcommandAttribute Represents a subcommand. Inheritance System.Object System.Attribute SubcommandAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)] public sealed class SubcommandAttribute : Attribute Constructors | Improve this Doc View Source SubcommandAttribute(String, Type) Initializes a new instance of SubcommandAttribute . Declaration public SubcommandAttribute(string name, Type commandType) Parameters Type Name Description System.String name The name of the subcommand System.Type commandType The type of the subcommand. Properties | Improve this Doc View Source CommandType The type of the subcommand. Declaration public Type CommandType { get; set; } Property Value Type Description System.Type | Improve this Doc View Source Name The name of the subcommand. Declaration public string Name { get; set; } Property Value Type Description System.String"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandParsingException.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandParsingException.html",
    "title": "Class CommandParsingException",
    "keywords": "Class CommandParsingException The exception that is thrown when command line arguments could not be parsed. Inheritance System.Object System.Exception CommandParsingException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandParsingException : Exception, ISerializable Constructors | Improve this Doc View Source CommandParsingException(CommandLineApplication, String) Initializes an instance of CommandParsingException . Declaration public CommandParsingException(CommandLineApplication command, string message) Parameters Type Name Description CommandLineApplication command The command. System.String message The message. | Improve this Doc View Source CommandParsingException(CommandLineApplication, String, Exception) Initializes an instance of CommandParsingException . Declaration public CommandParsingException(CommandLineApplication command, string message, Exception innerException) Parameters Type Name Description CommandLineApplication command The command. System.String message The message. System.Exception innerException The inner exception Properties | Improve this Doc View Source Command The command that is throwing the exception. Declaration public CommandLineApplication Command { get; } Property Value Type Description CommandLineApplication Implements System.Runtime.Serialization.ISerializable"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandOption-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandOption-1.html",
    "title": "Class CommandOption<T>",
    "keywords": "Class CommandOption<T> Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to CommandArgument<T> . The raw value must be parsable into type T Inheritance System.Object CommandOption CommandOption<T> Inherited Members CommandOption.Template CommandOption.ShortName CommandOption.LongName CommandOption.SymbolName CommandOption.ValueName CommandOption.Description CommandOption.Values CommandOption.OptionType CommandOption.ShowInHelpText CommandOption.Inherited CommandOption.Validators CommandOption.TryParse(String) CommandOption.HasValue() CommandOption.Value() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandOption<T> : CommandOption, IInternalCommandParamOfT Type Parameters Name Description T The type of the option value(s) Constructors | Improve this Doc View Source CommandOption(IValueParser<T>, String, CommandOptionType) Intializes a new instance of CommandOption<T> Declaration public CommandOption(IValueParser<T> valueParser, string template, CommandOptionType optionType) Parameters Type Name Description IValueParser <T> valueParser The parser use to convert values into type of T. System.String template The option tempalte. CommandOptionType optionType The optiont type Properties | Improve this Doc View Source ParsedValue The parsed value. Declaration public T ParsedValue { get; } Property Value Type Description T | Improve this Doc View Source ParsedValues All parsed values; Declaration public IReadOnlyList<T> ParsedValues { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList <T> Extension Methods ValidationExtensions.IsRequired(CommandOption, Boolean, String) ValidationExtensions.Accepts(CommandOption, Action<IOptionValidationBuilder>) ValidationExtensions.Accepts(CommandOption) ValidationExtensions.Accepts<T>(CommandOption<T>, Action<IOptionValidationBuilder<T>>) ValidationExtensions.Accepts<T>(CommandOption<T>) ValidationExtensions.OnValidate(CommandOption, Func<ValidationContext, ValidationResult>)"
  },
  "api/McMaster.Extensions.CommandLineUtils.PhysicalConsole.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.PhysicalConsole.html",
    "title": "Class PhysicalConsole",
    "keywords": "Class PhysicalConsole An implementation of IConsole that wraps System.Console . Inheritance System.Object PhysicalConsole Implements IConsole Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class PhysicalConsole : IConsole Properties | Improve this Doc View Source BackgroundColor System.Console.BackgroundColor . Declaration public ConsoleColor BackgroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source Error System.Console.Error . Declaration public TextWriter Error { get; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source ForegroundColor System.Console.ForegroundColor . Declaration public ConsoleColor ForegroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source In System.Console.In . Declaration public TextReader In { get; } Property Value Type Description System.IO.TextReader | Improve this Doc View Source IsErrorRedirected System.Console.IsErrorRedirected . Declaration public bool IsErrorRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInputRedirected System.Console.IsInputRedirected . Declaration public bool IsInputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOutputRedirected System.Console.IsOutputRedirected . Declaration public bool IsOutputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Out System.Console.Out . Declaration public TextWriter Out { get; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source Singleton A shared instance of PhysicalConsole . Declaration public static IConsole Singleton { get; } Property Value Type Description IConsole Methods | Improve this Doc View Source ResetColor() System.Console.ResetColor . Declaration public void ResetColor() Events | Improve this Doc View Source CancelKeyPress System.Console.CancelKeyPress . Declaration public event ConsoleCancelEventHandler CancelKeyPress Event Type Type Description System.ConsoleCancelEventHandler Implements IConsole Extension Methods ConsoleExtensions.WriteLine(IConsole) ConsoleExtensions.WriteLine(IConsole, String) ConsoleExtensions.WriteLine(IConsole, String, Object[]) ConsoleExtensions.WriteLine(IConsole, String, Object) ConsoleExtensions.WriteLine(IConsole, String, Object, Object) ConsoleExtensions.WriteLine(IConsole, String, Object, Object, Object) ConsoleExtensions.WriteLine(IConsole, UInt64) ConsoleExtensions.WriteLine(IConsole, Boolean) ConsoleExtensions.WriteLine(IConsole, Char) ConsoleExtensions.WriteLine(IConsole, Char[]) ConsoleExtensions.WriteLine(IConsole, Char[], Int32, Int32) ConsoleExtensions.WriteLine(IConsole, Decimal) ConsoleExtensions.WriteLine(IConsole, Double) ConsoleExtensions.WriteLine(IConsole, UInt32) ConsoleExtensions.WriteLine(IConsole, Int32) ConsoleExtensions.WriteLine(IConsole, Object) ConsoleExtensions.WriteLine(IConsole, Single) ConsoleExtensions.WriteLine(IConsole, Int64) ConsoleExtensions.Write(IConsole, String) ConsoleExtensions.Write(IConsole, String, Object[]) ConsoleExtensions.Write(IConsole, String, Object) ConsoleExtensions.Write(IConsole, String, Object, Object) ConsoleExtensions.Write(IConsole, String, Object, Object, Object) ConsoleExtensions.Write(IConsole, UInt32) ConsoleExtensions.Write(IConsole, Decimal) ConsoleExtensions.Write(IConsole, Int32) ConsoleExtensions.Write(IConsole, UInt64) ConsoleExtensions.Write(IConsole, Boolean) ConsoleExtensions.Write(IConsole, Char) ConsoleExtensions.Write(IConsole, Char[]) ConsoleExtensions.Write(IConsole, Char[], Int32, Int32) ConsoleExtensions.Write(IConsole, Double) ConsoleExtensions.Write(IConsole, Int64) ConsoleExtensions.Write(IConsole, Object) ConsoleExtensions.Write(IConsole, Single)"
  },
  "api/McMaster.Extensions.CommandLineUtils.OptionAttributeBase.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.OptionAttributeBase.html",
    "title": "Class OptionAttributeBase",
    "keywords": "Class OptionAttributeBase Common option properties. Inheritance System.Object System.Attribute OptionAttributeBase HelpOptionAttribute OptionAttribute VersionOptionAttribute VersionOptionFromMemberAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public abstract class OptionAttributeBase : Attribute Properties | Improve this Doc View Source Description A description of this option to show in generated help text. Description . Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Inherited Determines if subcommands added to Commands should also have access to this option. Inherited . Declaration public bool Inherited { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LongName The long command line flag used to identify this option. On command line, this is preceeded by a double dash: '--{LongName}'. Declaration public string LongName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShortName The short command line flag used to identify this option. On command line, this is preceeded by a single '-{ShortName}'. Declaration public string ShortName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShowInHelpText Determines if this option should be shown in generated help text. ShowInHelpText . Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SymbolName Can be used in addition to ShortName to add a single, non-English character. Example \"-?\". Declaration public string SymbolName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Template The option template. This is parsed into the short and long name. Declaration public string Template { get; set; } Property Value Type Description System.String | Improve this Doc View Source ValueName The name of value(s) shown in help text when OptionType is not NoValue . Declaration public string ValueName { get; set; } Property Value Type Description System.String"
  },
  "api/McMaster.Extensions.CommandLineUtils.DotNetExe.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.DotNetExe.html",
    "title": "Class DotNetExe",
    "keywords": "Class DotNetExe Utilities for finding the \"dotnet.exe\" file from the currently running .NET Core application. Inheritance System.Object DotNetExe Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class DotNetExe Properties | Improve this Doc View Source FullPath The full filepath to the .NET Core CLI executable. Declaration public static string FullPath { get; } Property Value Type Description System.String Methods | Improve this Doc View Source FullPathOrDefault() Finds the full filepath to the .NET Core CLI executable, or returns a string containing the default name of the .NET Core muxer ('dotnet'). Declaration public static string FullPathOrDefault() Returns Type Description System.String The path or a string named 'dotnet'"
  },
  "api/McMaster.Extensions.CommandLineUtils.DotNetCliContext.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.DotNetCliContext.html",
    "title": "Class DotNetCliContext",
    "keywords": "Class DotNetCliContext APIs related to .NET Core CLI. Inheritance System.Object DotNetCliContext Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class DotNetCliContext Methods | Improve this Doc View Source IsGlobalVerbose() dotnet --verbose subcommand Declaration public static bool IsGlobalVerbose() Returns Type Description System.Boolean"
  },
  "api/McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.AllowedValuesAttribute.html",
    "title": "Class AllowedValuesAttribute",
    "keywords": "Class AllowedValuesAttribute Specifies a set of allowed values and a comparer used to determine if a value is in that set. By default, value comparison is case-sensitive. To ensure case matches exactly, set IgnoreCase to false . Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute AllowedValuesAttribute Inherited Members System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class AllowedValuesAttribute : ValidationAttribute Constructors | Improve this Doc View Source AllowedValuesAttribute(String[]) Initializes an instance of AllowedValuesAttribute . Declaration public AllowedValuesAttribute(params string[] allowedValues) Parameters Type Name Description System.String [] allowedValues | Improve this Doc View Source AllowedValuesAttribute(StringComparison, String[]) Initializes an instance of AllowedValuesAttribute . Declaration public AllowedValuesAttribute(StringComparison comparer, params string[] allowedValues) Parameters Type Name Description System.StringComparison comparer System.String [] allowedValues Properties | Improve this Doc View Source Comparer The comparison method used. Declaration public StringComparison Comparer { get; set; } Property Value Type Description System.StringComparison | Improve this Doc View Source IgnoreCase Comparison between values and allowed values should ignore case. Declaration public bool IgnoreCase { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source IsValid(Object, ValidationContext) Declaration protected override ValidationResult IsValid(object value, ValidationContext validationContext) Parameters Type Name Description System.Object value System.ComponentModel.DataAnnotations.ValidationContext validationContext Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)"
  },
  "api/McMaster.Extensions.CommandLineUtils.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils Classes AllowedValuesAttribute Specifies a set of allowed values and a comparer used to determine if a value is in that set. By default, value comparison is case-sensitive. To ensure case matches exactly, set IgnoreCase to false . ArgumentAttribute Represents one or many positional command line arguments. Arguments are parsed based the Order given. Compare to OptionAttribute . ArgumentEscaper A utility for escaping arguments for new processes. CommandArgument Represents one or many positional command line arguments. Arguments are parsed in the order in which Arguments lists them. Compare to CommandOption . CommandArgument<T> Represents one or many positional command line arguments. Arguments are parsed in the order in which Arguments lists them. Compare to CommandOption . The raw value must be parsable into type T CommandAttribute Represents a command line application using attributes to define options and arguments. CommandLineApplication Describes a set of command line arguments, options, and execution behavior. CommandLineApplication can be nested to support subcommands. CommandLineApplication<TModel> Describes a set of command line arguments, options, and execution behavior using a type of TModel to model the application. CommandLineApplicationExtensions Helper methods for CommandLineApplication . CommandOption Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to CommandArgument . CommandOption<T> Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to CommandArgument<T> . The raw value must be parsable into type T CommandParsingException The exception that is thrown when command line arguments could not be parsed. ConsoleExtensions Helper methods for IConsole . ConsoleReporter A thread-safe reporter that forwards to console output. ConventionBuilderExtensions Methods for adding commonly used conventions DebugHelper Helps handle debug command-line arguments. DirectoryExistsAttribute Specifies that the data must be an already existing directory, not a file. DotNetCliContext APIs related to .NET Core CLI. DotNetExe Utilities for finding the \"dotnet.exe\" file from the currently running .NET Core application. FileExistsAttribute Specifies that the data must be an already existing file, not a directory. FileOrDirectoryExistsAttribute Specifies that the data must be an already existing file or directory. HelpOptionAttribute The option used to determine if help text should be displayed. This should only be used once per command line app. LegalFilePathAttribute Specifies that a value must be a legal file path. NullConsole An implementation of IConsole that does nothing. NullReporter A reporter that does nothing. OptionAttribute Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to ArgumentAttribute . OptionAttributeBase Common option properties. PhysicalConsole An implementation of IConsole that wraps System.Console . Prompt Utilities for getting input from an interactive console. SubcommandAttribute Represents a subcommand. ValidateMethodConvention Invokes a method named \"OnValidate\" on the model type after parsing. ValidationExtensions Extension methods for adding validation rules to options and arguments. VersionOptionAttribute The option used to determine if version text should be displayed. VersionOptionFromMemberAttribute The option used to determine if version info should be displayed. The value for the version information is provided by the properties or members specified. Interfaces IConsole An abstract console. IReporter Gathers messages with levels. Enums CommandOptionType Defines the kinds of inputs CommandOption accepts. ResponseFileHandling Specifies options for how to handle response files. The parser treats arguments beginning with &apos;@' as a file path to a response file. A response file contains additional arguments that will be treated as if they were passed in on the command line. Response files can have comments that begin with the # symbol. You cannot use the backslash character () to concatenate lines."
  },
  "api/McMaster.Extensions.CommandLineUtils.FileOrDirectoryExistsAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.FileOrDirectoryExistsAttribute.html",
    "title": "Class FileOrDirectoryExistsAttribute",
    "keywords": "Class FileOrDirectoryExistsAttribute Specifies that the data must be an already existing file or directory. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute FilePathExistsAttributeBase FileOrDirectoryExistsAttribute Inherited Members FilePathExistsAttributeBase.IsValid(Object, ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class FileOrDirectoryExistsAttribute : FilePathExistsAttributeBase Constructors | Improve this Doc View Source FileOrDirectoryExistsAttribute() Initializes an instance of FileOrDirectoryExistsAttribute . Declaration public FileOrDirectoryExistsAttribute()"
  },
  "api/McMaster.Extensions.CommandLineUtils.FileExistsAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.FileExistsAttribute.html",
    "title": "Class FileExistsAttribute",
    "keywords": "Class FileExistsAttribute Specifies that the data must be an already existing file, not a directory. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute FilePathExistsAttributeBase FileExistsAttribute Inherited Members FilePathExistsAttributeBase.IsValid(Object, ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class FileExistsAttribute : FilePathExistsAttributeBase Constructors | Improve this Doc View Source FileExistsAttribute() Initializes an instance of FileExistsAttribute . Declaration public FileExistsAttribute()"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionAttributeConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionAttributeConvention.html",
    "title": "Class VersionOptionAttributeConvention",
    "keywords": "Class VersionOptionAttributeConvention Sets OptionVersion using settings from VersionOptionAttribute on the model type of CommandLineApplication<TModel> . Inheritance System.Object OptionAttributeConventionBase < VersionOptionAttribute > VersionOptionAttributeConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class VersionOptionAttributeConvention : OptionAttributeConventionBase<VersionOptionAttribute>, IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.ValidationErrorMethodConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.ValidationErrorMethodConvention.html",
    "title": "Class ValidationErrorMethodConvention",
    "keywords": "Class ValidationErrorMethodConvention Invokes a method named OnValidationError on the model type of CommandLineApplication<TModel> to handle validation errors. Inheritance System.Object ValidationErrorMethodConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ValidationErrorMethodConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConventionBase-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConventionBase-1.html",
    "title": "Class OptionAttributeConventionBase<TAttribute>",
    "keywords": "Class OptionAttributeConventionBase<TAttribute> Shared implementation for adding conventions based on OptionAttributeBase . Inheritance System.Object OptionAttributeConventionBase<TAttribute> HelpOptionAttributeConvention OptionAttributeConvention VersionOptionAttributeConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public abstract class OptionAttributeConventionBase<TAttribute> where TAttribute : OptionAttributeBase Type Parameters Name Description TAttribute"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.OptionAttributeConvention.html",
    "title": "Class OptionAttributeConvention",
    "keywords": "Class OptionAttributeConvention Adds an CommandOption to match each usage of OptionAttribute on the model type of CommandLineApplication<TModel> . Inheritance System.Object OptionAttributeConventionBase < OptionAttribute > OptionAttributeConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class OptionAttributeConvention : OptionAttributeConventionBase<OptionAttribute>, IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.ExecuteMethodConvention.html",
    "title": "Class ExecuteMethodConvention",
    "keywords": "Class ExecuteMethodConvention Sets Invoke to call a method named OnExecute or OnExecuteAsync on the model type of CommandLineApplication<TModel> . Inheritance System.Object ExecuteMethodConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ExecuteMethodConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.CommandAttributeConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.CommandAttributeConvention.html",
    "title": "Class CommandAttributeConvention",
    "keywords": "Class CommandAttributeConvention Adds settings from CommandAttribute set on the model type for CommandLineApplication<TModel> . Inheritance System.Object CommandAttributeConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandAttributeConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils.Validation",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils.Validation Classes AttributeValidator A validator that uses a System.ComponentModel.DataAnnotations.ValidationAttribute to validate a command line option or argument. DelegateValidator Implements a validator with an anonymous function FilePathExistsAttributeBase Base type for attributes that check for existing files or directories. ValidationBuilder Default implementation of IOptionValidationBuilder and IArgumentValidationBuilder . ValidationBuilder<T> Default implementation of IOptionValidationBuilder<T> and IArgumentValidationBuilder<T> . Interfaces IArgumentValidationBuilder Creates a collection of validators for CommandArgument . IArgumentValidationBuilder<T> Creates a collection of validators for CommandArgument<T> . IArgumentValidator Provides validation for a CommandArgument . ICommandValidator Provides validation on a command IOptionValidationBuilder Creates a collection of validators for CommandOption . IOptionValidationBuilder<T> Creates a collection of validators for CommandOption<T> . IOptionValidator Provides validation for a CommandOption . IValidationBuilder Creates a collection of validators. IValidationBuilder<T> Creates a collection of validators on CommandOption<T> or CommandArgument<T> IValidator Provides validation for CommandArgument and CommandOption ."
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.ValidationBuilder.html",
    "title": "Class ValidationBuilder",
    "keywords": "Class ValidationBuilder Default implementation of IOptionValidationBuilder and IArgumentValidationBuilder . Inheritance System.Object ValidationBuilder ValidationBuilder<T> Implements IOptionValidationBuilder IArgumentValidationBuilder IValidationBuilder Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ValidationBuilder : IOptionValidationBuilder, IArgumentValidationBuilder, IValidationBuilder Constructors | Improve this Doc View Source ValidationBuilder(CommandArgument) Creates a new instance of ValidationBuilder for a given CommandArgument . Declaration public ValidationBuilder(CommandArgument argument) Parameters Type Name Description CommandArgument argument The argument. | Improve this Doc View Source ValidationBuilder(CommandOption) Creates a new instance of ValidationBuilder for a given CommandOption . Declaration public ValidationBuilder(CommandOption option) Parameters Type Name Description CommandOption option The option. Methods | Improve this Doc View Source Use(IValidator) Adds a validator to the argument or option. Declaration public void Use(IValidator validator) Parameters Type Name Description IValidator validator Explicit Interface Implementations | Improve this Doc View Source IArgumentValidationBuilder.Use(IArgumentValidator) Declaration void IArgumentValidationBuilder.Use(IArgumentValidator validator) Parameters Type Name Description IArgumentValidator validator | Improve this Doc View Source IOptionValidationBuilder.Use(IOptionValidator) Declaration void IOptionValidationBuilder.Use(IOptionValidator validator) Parameters Type Name Description IOptionValidator validator Implements IOptionValidationBuilder IArgumentValidationBuilder IValidationBuilder Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IOptionValidationBuilder-1.html",
    "title": "Interface IOptionValidationBuilder<T>",
    "keywords": "Interface IOptionValidationBuilder<T> Creates a collection of validators for CommandOption<T> . Inherited Members IOptionValidationBuilder.Use(IOptionValidator) IValidationBuilder.Use(IValidator) Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IOptionValidationBuilder<T> : IOptionValidationBuilder, IValidationBuilder<T>, IValidationBuilder Type Parameters Name Description T Remarks Custom validation extension methods that only apply to CommandOption<T> should hang off this type. Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.ICommandValidator.html",
    "title": "Interface ICommandValidator",
    "keywords": "Interface ICommandValidator Provides validation on a command Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface ICommandValidator Methods | Improve this Doc View Source GetValidationResult(CommandLineApplication, ValidationContext) Validates a command Declaration ValidationResult GetValidationResult(CommandLineApplication command, ValidationContext context) Parameters Type Name Description CommandLineApplication command The command. System.ComponentModel.DataAnnotations.ValidationContext context The validation context. Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult The validation result. Returns System.ComponentModel.DataAnnotations.ValidationResult.Success if the values pass validation."
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.SubcommandPropertyConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.SubcommandPropertyConvention.html",
    "title": "Class SubcommandPropertyConvention",
    "keywords": "Class SubcommandPropertyConvention Sets a property named Subcommand to the value of the selected subcommand model type of CommandLineApplication<TModel> . Inheritance System.Object SubcommandPropertyConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class SubcommandPropertyConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.SubcommandAttributeConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.SubcommandAttributeConvention.html",
    "title": "Class SubcommandAttributeConvention",
    "keywords": "Class SubcommandAttributeConvention Creates a subcommand for each SubcommandAttribute on the model type of CommandLineApplication<TModel> . Inheritance System.Object SubcommandAttributeConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class SubcommandAttributeConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.IConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.IConvention.html",
    "title": "Interface IConvention",
    "keywords": "Interface IConvention Defines a convention for an instance of CommandLineApplication<TModel> . Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied."
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.HelpOptionAttributeConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.HelpOptionAttributeConvention.html",
    "title": "Class HelpOptionAttributeConvention",
    "keywords": "Class HelpOptionAttributeConvention Sets OptionHelp based on the usage of HelpOptionAttribute . Inheritance System.Object OptionAttributeConventionBase < HelpOptionAttribute > HelpOptionAttributeConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class HelpOptionAttributeConvention : OptionAttributeConventionBase<HelpOptionAttribute>, IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Abstractions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Abstractions.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils.Abstractions",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils.Abstractions Classes CommandLineContext Contains information about the execution context of the command-line application. ParseResult The result of parsing command line arguments. ValueParserProvider A store of value parsers that are used to convert argument values from strings to types. Interfaces IModelAccessor Provides access to a command line application model. IValueParser A parser that can convert string into an object. IValueParser<T> A parser that can convert string into T ."
  },
  "api/McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Abstractions.IValueParser.html",
    "title": "Interface IValueParser",
    "keywords": "Interface IValueParser A parser that can convert string into an object. Namespace : McMaster.Extensions.CommandLineUtils.Abstractions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IValueParser Properties | Improve this Doc View Source TargetType Gets the Type that this value parser is defined for. Declaration Type TargetType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source Parse(String, String, CultureInfo) Parses the raw string value. Declaration object Parse(string argName, string value, CultureInfo culture) Parameters Type Name Description System.String argName The name of the argument this value will be bound to. System.String value The raw string value to parse. System.Globalization.CultureInfo culture The culture that should be used to parse values. Returns Type Description System.Object The parsed value object."
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder.html",
    "title": "Interface IValidationBuilder",
    "keywords": "Interface IValidationBuilder Creates a collection of validators. Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IValidationBuilder Remarks Custom validation extension methods should hang off this type. Methods | Improve this Doc View Source Use(IValidator) Use the IValidator . Declaration void Use(IValidator validator) Parameters Type Name Description IValidator validator The validator. Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IValidationBuilder-1.html",
    "title": "Interface IValidationBuilder<T>",
    "keywords": "Interface IValidationBuilder<T> Creates a collection of validators on CommandOption<T> or CommandArgument<T> Inherited Members IValidationBuilder.Use(IValidator) Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IValidationBuilder<T> : IValidationBuilder Type Parameters Name Description T Remarks Custom validation extension methods should hang off this type. Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidator.html",
    "title": "Interface IArgumentValidator",
    "keywords": "Interface IArgumentValidator Provides validation for a CommandArgument . Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IArgumentValidator Methods | Improve this Doc View Source GetValidationResult(CommandArgument, ValidationContext) Validates the values specified for Values . Declaration ValidationResult GetValidationResult(CommandArgument argument, ValidationContext context) Parameters Type Name Description CommandArgument argument The argument. System.ComponentModel.DataAnnotations.ValidationContext context The validation context. Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult The validation result. Returns System.ComponentModel.DataAnnotations.ValidationResult.Success if the values pass validation."
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.IArgumentValidationBuilder.html",
    "title": "Interface IArgumentValidationBuilder",
    "keywords": "Interface IArgumentValidationBuilder Creates a collection of validators for CommandArgument . Inherited Members IValidationBuilder.Use(IValidator) Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IArgumentValidationBuilder : IValidationBuilder Remarks Custom validation extension methods that only apply to CommandArgument should hang off this type. Methods | Improve this Doc View Source Use(IArgumentValidator) Use the given IArgumentValidator . Declaration void Use(IArgumentValidator validator) Parameters Type Name Description IArgumentValidator validator The validator. Extension Methods ValidationExtensions.Enum<TEnum>(IValidationBuilder, Boolean) ValidationExtensions.Values(IValidationBuilder, String[]) ValidationExtensions.Values(IValidationBuilder, Boolean, String[]) ValidationExtensions.Values(IValidationBuilder, StringComparison, String[]) ValidationExtensions.EmailAddress(IValidationBuilder, String) ValidationExtensions.ExistingFile(IValidationBuilder, String) ValidationExtensions.ExistingDirectory(IValidationBuilder, String) ValidationExtensions.ExistingFileOrDirectory(IValidationBuilder, String) ValidationExtensions.LegalFilePath(IValidationBuilder, String) ValidationExtensions.MinLength(IValidationBuilder, Int32, String) ValidationExtensions.MaxLength(IValidationBuilder, Int32, String) ValidationExtensions.RegularExpression(IValidationBuilder, String, String) ValidationExtensions.Satisfies<TAttribute>(IValidationBuilder, String, Object[])"
  },
  "api/McMaster.Extensions.CommandLineUtils.NullConsole.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.NullConsole.html",
    "title": "Class NullConsole",
    "keywords": "Class NullConsole An implementation of IConsole that does nothing. Inheritance System.Object NullConsole Implements IConsole Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class NullConsole : IConsole Properties | Improve this Doc View Source BackgroundColor The background color of output. Declaration public ConsoleColor BackgroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source Error A writer that does nothing. Declaration public TextWriter Error { get; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source ForegroundColor The foreground color of output. Declaration public ConsoleColor ForegroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source In An empty reader. Declaration public TextReader In { get; } Property Value Type Description System.IO.TextReader | Improve this Doc View Source IsErrorRedirected Always false . Declaration public bool IsErrorRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInputRedirected Always false . Declaration public bool IsInputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOutputRedirected Always false . Declaration public bool IsOutputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Out A writer that does nothing. Declaration public TextWriter Out { get; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source Singleton A shared instance of NullConsole . Declaration public static NullConsole Singleton { get; } Property Value Type Description NullConsole Methods | Improve this Doc View Source ResetColor() Does nothing. Declaration public void ResetColor() Events | Improve this Doc View Source CancelKeyPress This event never fires. Declaration public event ConsoleCancelEventHandler CancelKeyPress Event Type Type Description System.ConsoleCancelEventHandler Implements IConsole Extension Methods ConsoleExtensions.WriteLine(IConsole) ConsoleExtensions.WriteLine(IConsole, String) ConsoleExtensions.WriteLine(IConsole, String, Object[]) ConsoleExtensions.WriteLine(IConsole, String, Object) ConsoleExtensions.WriteLine(IConsole, String, Object, Object) ConsoleExtensions.WriteLine(IConsole, String, Object, Object, Object) ConsoleExtensions.WriteLine(IConsole, UInt64) ConsoleExtensions.WriteLine(IConsole, Boolean) ConsoleExtensions.WriteLine(IConsole, Char) ConsoleExtensions.WriteLine(IConsole, Char[]) ConsoleExtensions.WriteLine(IConsole, Char[], Int32, Int32) ConsoleExtensions.WriteLine(IConsole, Decimal) ConsoleExtensions.WriteLine(IConsole, Double) ConsoleExtensions.WriteLine(IConsole, UInt32) ConsoleExtensions.WriteLine(IConsole, Int32) ConsoleExtensions.WriteLine(IConsole, Object) ConsoleExtensions.WriteLine(IConsole, Single) ConsoleExtensions.WriteLine(IConsole, Int64) ConsoleExtensions.Write(IConsole, String) ConsoleExtensions.Write(IConsole, String, Object[]) ConsoleExtensions.Write(IConsole, String, Object) ConsoleExtensions.Write(IConsole, String, Object, Object) ConsoleExtensions.Write(IConsole, String, Object, Object, Object) ConsoleExtensions.Write(IConsole, UInt32) ConsoleExtensions.Write(IConsole, Decimal) ConsoleExtensions.Write(IConsole, Int32) ConsoleExtensions.Write(IConsole, UInt64) ConsoleExtensions.Write(IConsole, Boolean) ConsoleExtensions.Write(IConsole, Char) ConsoleExtensions.Write(IConsole, Char[]) ConsoleExtensions.Write(IConsole, Char[], Int32, Int32) ConsoleExtensions.Write(IConsole, Double) ConsoleExtensions.Write(IConsole, Int64) ConsoleExtensions.Write(IConsole, Object) ConsoleExtensions.Write(IConsole, Single)"
  },
  "api/McMaster.Extensions.CommandLineUtils.LegalFilePathAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.LegalFilePathAttribute.html",
    "title": "Class LegalFilePathAttribute",
    "keywords": "Class LegalFilePathAttribute Specifies that a value must be a legal file path. Inheritance System.Object System.Attribute System.ComponentModel.DataAnnotations.ValidationAttribute LegalFilePathAttribute Inherited Members System.ComponentModel.DataAnnotations.ValidationAttribute.FormatErrorMessage(System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.GetValidationResult(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.ComponentModel.DataAnnotations.ValidationContext) System.ComponentModel.DataAnnotations.ValidationAttribute.Validate(System.Object, System.String) System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessage System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceName System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageResourceType System.ComponentModel.DataAnnotations.ValidationAttribute.ErrorMessageString System.ComponentModel.DataAnnotations.ValidationAttribute.RequiresValidationContext System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class LegalFilePathAttribute : ValidationAttribute Constructors | Improve this Doc View Source LegalFilePathAttribute() Initializes an instance of LegalFilePathAttribute . Declaration public LegalFilePathAttribute() Methods | Improve this Doc View Source IsValid(Object, ValidationContext) Declaration protected override ValidationResult IsValid(object value, ValidationContext validationContext) Parameters Type Name Description System.Object value System.ComponentModel.DataAnnotations.ValidationContext validationContext Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult Overrides System.ComponentModel.DataAnnotations.ValidationAttribute.IsValid(System.Object, System.ComponentModel.DataAnnotations.ValidationContext)"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.IConventionBuilder.html",
    "title": "Interface IConventionBuilder",
    "keywords": "Interface IConventionBuilder Builds a collection of conventions. Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IConventionBuilder Methods | Improve this Doc View Source AddConvention(IConvention) Add a convention that will be applied later. Declaration IConventionBuilder AddConvention(IConvention convention) Parameters Type Name Description IConvention convention The convention Returns Type Description IConventionBuilder Extension Methods ConventionBuilderExtensions.UseDefaultConventions(IConventionBuilder) ConventionBuilderExtensions.UseAttributes(IConventionBuilder) ConventionBuilderExtensions.SetRemainingArgsPropertyOnModel(IConventionBuilder) ConventionBuilderExtensions.SetSubcommandPropertyOnModel(IConventionBuilder) ConventionBuilderExtensions.SetParentPropertyOnModel(IConventionBuilder) ConventionBuilderExtensions.SetAppNameFromEntryAssembly(IConventionBuilder) ConventionBuilderExtensions.UseCommandAttribute(IConventionBuilder) ConventionBuilderExtensions.UseVersionOptionFromMemberAttribute(IConventionBuilder) ConventionBuilderExtensions.UseVersionOptionAttribute(IConventionBuilder) ConventionBuilderExtensions.UseHelpOptionAttribute(IConventionBuilder) ConventionBuilderExtensions.UseOptionAttributes(IConventionBuilder) ConventionBuilderExtensions.UseArgumentAttributes(IConventionBuilder) ConventionBuilderExtensions.UseSubcommandAttributes(IConventionBuilder) ConventionBuilderExtensions.UseOnValidateMethodFromModel(IConventionBuilder) ConventionBuilderExtensions.UseOnValidationErrorMethodFromModel(IConventionBuilder) ConventionBuilderExtensions.UseOnExecuteMethodFromModel(IConventionBuilder) ConventionBuilderExtensions.UseConstructorInjection(IConventionBuilder) ConventionBuilderExtensions.UseConstructorInjection(IConventionBuilder, IServiceProvider)"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.ArgumentAttributeConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.ArgumentAttributeConvention.html",
    "title": "Class ArgumentAttributeConvention",
    "keywords": "Class ArgumentAttributeConvention Adds a CommandArgument for each ArgumentAttribute on the model type for CommandLineApplication<TModel> . Inheritance System.Object ArgumentAttributeConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ArgumentAttributeConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandArgument.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandArgument.html",
    "title": "Class CommandArgument",
    "keywords": "Class CommandArgument Represents one or many positional command line arguments. Arguments are parsed in the order in which Arguments lists them. Compare to CommandOption . Inheritance System.Object CommandArgument CommandArgument<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandArgument Constructors | Improve this Doc View Source CommandArgument() Initializes a new instance of CommandArgument . Declaration public CommandArgument() Properties | Improve this Doc View Source Description A description of the argument. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source MultipleValues Allow multiple values. Declaration public bool MultipleValues { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Name The name of the argument. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShowInHelpText Determines if the argument appears in the generated help-text. Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Validators A collection of validators that execute before invoking OnExecute(Func<Int32>) . When validation fails, ValidationErrorHandler is invoked. Declaration public ICollection<IArgumentValidator> Validators { get; } Property Value Type Description System.Collections.Generic.ICollection < IArgumentValidator > | Improve this Doc View Source Value The first value from Values , if any. Declaration public string Value { get; } Property Value Type Description System.String | Improve this Doc View Source Values All values specified, if any. Declaration public List<string> Values { get; } Property Value Type Description System.Collections.Generic.List < System.String > Extension Methods ValidationExtensions.IsRequired(CommandArgument, Boolean, String) ValidationExtensions.Accepts(CommandArgument, Action<IArgumentValidationBuilder>) ValidationExtensions.Accepts(CommandArgument) ValidationExtensions.OnValidate(CommandArgument, Func<ValidationContext, ValidationResult>)"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandLineApplication.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandLineApplication.html",
    "title": "Class CommandLineApplication",
    "keywords": "Class CommandLineApplication Describes a set of command line arguments, options, and execution behavior. CommandLineApplication can be nested to support subcommands. Inheritance System.Object CommandLineApplication CommandLineApplication <TModel> Implements System.IServiceProvider Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandLineApplication : IServiceProvider Constructors | Improve this Doc View Source CommandLineApplication(IHelpTextGenerator, IConsole, String, Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IHelpTextGenerator helpTextGenerator, IConsole console, string workingDirectory, bool throwOnUnexpectedArg) Parameters Type Name Description IHelpTextGenerator helpTextGenerator The help text generator to use. IConsole console The console implementation to use. System.String workingDirectory The current working directory. System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . | Improve this Doc View Source CommandLineApplication(IConsole) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IConsole console) Parameters Type Name Description IConsole console The console implementation to use. | Improve this Doc View Source CommandLineApplication(IConsole, String, Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IConsole console, string workingDirectory, bool throwOnUnexpectedArg) Parameters Type Name Description IConsole console The console implementation to use. System.String workingDirectory The current working directory. System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . | Improve this Doc View Source CommandLineApplication(Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(bool throwOnUnexpectedArg = true) Parameters Type Name Description System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . Properties | Improve this Doc View Source AllowArgumentSeparator Determines if '--' can be used to separate known arguments and options from additional content passed to RemainingArguments . Declaration public bool AllowArgumentSeparator { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Arguments Required command-line arguments. Declaration public List<CommandArgument> Arguments { get; } Property Value Type Description System.Collections.Generic.List < CommandArgument > | Improve this Doc View Source Commands Subcommands. Declaration public List<CommandLineApplication> Commands { get; } Property Value Type Description System.Collections.Generic.List < CommandLineApplication > | Improve this Doc View Source Conventions Gets a builder that can be used to apply conventions to Declaration public IConventionBuilder Conventions { get; } Property Value Type Description IConventionBuilder | Improve this Doc View Source Description A description of the command. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Error The writer used to display generated error messages. Declaration public TextWriter Error { get; set; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source ExtendedHelpText Additional text that appears at the bottom of generated help text. Declaration public string ExtendedHelpText { get; set; } Property Value Type Description System.String | Improve this Doc View Source FullName The full name of the command to show in the help text. Declaration public string FullName { get; set; } Property Value Type Description System.String | Improve this Doc View Source HelpTextGenerator The help text generator to use. Declaration public IHelpTextGenerator HelpTextGenerator { get; set; } Property Value Type Description IHelpTextGenerator | Improve this Doc View Source Invoke The action to call when this command is matched and IsShowingInformation is false . Declaration public Func<int> Invoke { get; set; } Property Value Type Description System.Func < System.Int32 > | Improve this Doc View Source IsShowingInformation True when OptionHelp or OptionVersion was matched. Declaration public bool IsShowingInformation { get; protected set; } Property Value Type Description System.Boolean | Improve this Doc View Source LongVersionGetter The long-form of the version to display in generated help text. Declaration public Func<string> LongVersionGetter { get; set; } Property Value Type Description System.Func < System.String > | Improve this Doc View Source Name The short name of the command. When this is a subcommand, it is the name of the word used to invoke the subcommand. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source OptionHelp The option used to determine if help text should be displayed. This is set by calling HelpOption(String) . Declaration public CommandOption OptionHelp { get; } Property Value Type Description CommandOption | Improve this Doc View Source Options Available command-line options on this command. Use GetOptions() to get all available options, which may include inherited options. Declaration public List<CommandOption> Options { get; } Property Value Type Description System.Collections.Generic.List < CommandOption > | Improve this Doc View Source OptionsComparison The way arguments and options are matched. Declaration public StringComparison OptionsComparison { get; set; } Property Value Type Description System.StringComparison | Improve this Doc View Source OptionVersion The options used to determine if the command version should be displayed. This is set by calling VersionOption(String, Func<String>, Func<String>) . Declaration public CommandOption OptionVersion { get; } Property Value Type Description CommandOption | Improve this Doc View Source Out The writer used to display generated help text. Declaration public TextWriter Out { get; set; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source Parent Defaults to null. A link to the parent command if this is instance is a subcommand. Declaration public CommandLineApplication Parent { get; set; } Property Value Type Description CommandLineApplication | Improve this Doc View Source RemainingArguments When initialized with ThrowOnUnexpectedArgument to false , this will contain any unrecognized arguments. Declaration public List<string> RemainingArguments { get; } Property Value Type Description System.Collections.Generic.List < System.String > | Improve this Doc View Source ResponseFileHandling When enabled, the parser will treat any arguments beginning with &apos;@' as a file path to a response file. A response file contains additional arguments that will be treated as if they were passed in on the command line. Defaults to Disabled . Nested response false are not supported. Declaration public ResponseFileHandling ResponseFileHandling { get; set; } Property Value Type Description ResponseFileHandling | Improve this Doc View Source ShortVersionGetter The short-form of the version to display in generated help text. Declaration public Func<string> ShortVersionGetter { get; set; } Property Value Type Description System.Func < System.String > | Improve this Doc View Source ShowInHelpText Determines if this command appears in generated help text. Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ThrowOnUnexpectedArgument Indicates whether the parser should throw an exception when it runs into an unexpected argument. If this field is set to false, the parser will stop parsing when it sees an unexpected argument, and all remaining arguments, including the first unexpected argument, will be stored in RemainingArguments property. Declaration public bool ThrowOnUnexpectedArgument { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source ValidationErrorHandler The action to call when the command executes, but there was an error validation options or arguments. The action can return a new validation result. Declaration public Func<ValidationResult, int> ValidationErrorHandler { get; set; } Property Value Type Description System.Func < System.ComponentModel.DataAnnotations.ValidationResult , System.Int32 > | Improve this Doc View Source Validators A collection of validators that execute before invoking OnExecute(Func<Int32>) . When validation fails, ValidationErrorHandler is invoked. Declaration public ICollection<ICommandValidator> Validators { get; } Property Value Type Description System.Collections.Generic.ICollection < ICommandValidator > | Improve this Doc View Source ValueParsers Gets the default value parser provider. The value parsers control how argument values are converted from strings to other types. Additional value parsers can be added so that domain specific types can converted. In-built value parsers can also be replaced for precise control of all type conversion. Value parsers are currently only used by the Attribute API. Declaration public ValueParserProvider ValueParsers { get; } Property Value Type Description ValueParserProvider | Improve this Doc View Source WorkingDirectory Defines the working directory of the application. Defaults to System.IO.Directory.GetCurrentDirectory . This will be used as the base path for opening response files when ResponseFileHandling is true . Declaration public string WorkingDirectory { get; } Property Value Type Description System.String Methods | Improve this Doc View Source Argument(String, String, Action<CommandArgument>, Boolean) Adds a command line argument. Declaration public CommandArgument Argument(string name, string description, Action<CommandArgument> configuration, bool multipleValues = false) Parameters Type Name Description System.String name System.String description System.Action < CommandArgument > configuration System.Boolean multipleValues Returns Type Description CommandArgument | Improve this Doc View Source Argument(String, String, Boolean) Adds a command line argument Declaration public CommandArgument Argument(string name, string description, bool multipleValues = false) Parameters Type Name Description System.String name System.String description System.Boolean multipleValues Returns Type Description CommandArgument | Improve this Doc View Source Argument<T>(String, String, Action<CommandArgument>, Boolean) Adds a command line argument with values that should be parsable into T . Declaration public CommandArgument<T> Argument<T>(string name, string description, Action<CommandArgument> configuration, bool multipleValues = false) Parameters Type Name Description System.String name System.String description System.Action < CommandArgument > configuration System.Boolean multipleValues Returns Type Description CommandArgument <T> Type Parameters Name Description T The type of the values on the option | Improve this Doc View Source Command(String, Action<CommandLineApplication>, Boolean) Adds a subcommand. Declaration public CommandLineApplication Command(string name, Action<CommandLineApplication> configuration, bool throwOnUnexpectedArg = true) Parameters Type Name Description System.String name The word used to invoke the subcommand. System.Action < CommandLineApplication > configuration System.Boolean throwOnUnexpectedArg Returns Type Description CommandLineApplication | Improve this Doc View Source Command<TModel>(String, Action<CommandLineApplication<TModel>>, Boolean) Adds a subcommand with model of type TModel . Declaration public CommandLineApplication<TModel> Command<TModel>(string name, Action<CommandLineApplication<TModel>> configuration, bool throwOnUnexpectedArg = true)where TModel : class Parameters Type Name Description System.String name The word used to invoke the subcommand. System.Action < CommandLineApplication <TModel>> configuration System.Boolean throwOnUnexpectedArg Returns Type Description CommandLineApplication <TModel> Type Parameters Name Description TModel The model type of the subcommand. | Improve this Doc View Source Execute(String[]) Parses an array of strings using Parse(String[]) . If OptionHelp was matched, the generated help text is displayed in command line output. If OptionVersion was matched, the generated version info is displayed in command line output. If there were any validation errors produced from McMaster.Extensions.CommandLineUtils.CommandLineApplication.GetValidationResult , ValidationErrorHandler is invoked. If the parse result matches this command, Invoke will be invoked. Declaration public int Execute(params string[] args) Parameters Type Name Description System.String [] args Returns Type Description System.Int32 The return code from Invoke . | Improve this Doc View Source Execute<TApp>(CommandLineContext) Creates an instance of TApp , matching Arguments to all attributes on the type, and then invoking a method named \"OnExecute\" or \"OnExecuteAsync\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static int Execute<TApp>(CommandLineContext context)where TApp : class Parameters Type Name Description CommandLineContext context The execution context. Returns Type Description System.Int32 The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition System.InvalidOperationException Thrown when attributes are incorrectly configured. | Improve this Doc View Source Execute<TApp>(IConsole, String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"OnExecute\" or \"OnExecuteAsync\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static int Execute<TApp>(IConsole console, params string[] args)where TApp : class Parameters Type Name Description IConsole console The console to use System.String [] args The arguments Returns Type Description System.Int32 The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition System.InvalidOperationException Thrown when attributes are incorrectly configured. | Improve this Doc View Source Execute<TApp>(String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"OnExecute\" or \"OnExecuteAsync\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static int Execute<TApp>(params string[] args)where TApp : class Parameters Type Name Description System.String [] args The arguments Returns Type Description System.Int32 The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition System.InvalidOperationException Thrown when attributes are incorrectly configured. | Improve this Doc View Source ExecuteAsync<TApp>(CommandLineContext) Creates an instance of TApp , matching Arguments to all attributes on the type, and then invoking a method named \"OnExecute\" or \"OnExecuteAsync\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static Task<int> ExecuteAsync<TApp>(CommandLineContext context)where TApp : class Parameters Type Name Description CommandLineContext context The execution context. Returns Type Description System.Threading.Tasks.Task < System.Int32 > The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition System.InvalidOperationException Thrown when attributes are incorrectly configured. | Improve this Doc View Source ExecuteAsync<TApp>(IConsole, String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"OnExecute\" or \"OnExecuteAsync\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static Task<int> ExecuteAsync<TApp>(IConsole console, params string[] args)where TApp : class Parameters Type Name Description IConsole console The console to use System.String [] args The arguments Returns Type Description System.Threading.Tasks.Task < System.Int32 > The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition System.InvalidOperationException Thrown when attributes are incorrectly configured. | Improve this Doc View Source ExecuteAsync<TApp>(String[]) Creates an instance of TApp , matching args to all attributes on the type, and then invoking a method named \"OnExecute\" or \"OnExecuteAsync\" if it exists. See OptionAttribute , ArgumentAttribute , HelpOptionAttribute , and VersionOptionAttribute . Declaration public static Task<int> ExecuteAsync<TApp>(params string[] args)where TApp : class Parameters Type Name Description System.String [] args The arguments Returns Type Description System.Threading.Tasks.Task < System.Int32 > The process exit code Type Parameters Name Description TApp A type that should be bound to the arguments. Exceptions Type Condition System.InvalidOperationException Thrown when attributes are incorrectly configured. | Improve this Doc View Source GetFullNameAndVersion() Gets FullName and ShortVersionGetter . Declaration public string GetFullNameAndVersion() Returns Type Description System.String | Improve this Doc View Source GetHelpText() Produces help text describing command usage. Declaration public virtual string GetHelpText() Returns Type Description System.String The help text. | Improve this Doc View Source GetHelpText(String) This method has been marked as obsolete and will be removed in a future version. The recommended replacement is GetHelpText() Declaration [Obsolete(\"This method has been marked as obsolete and will be removed in a future version.The recommended replacement is GetHelpText()\")] public virtual string GetHelpText(string commandName = null) Parameters Type Name Description System.String commandName Returns Type Description System.String | Improve this Doc View Source GetOptions() Gets all command line options available to this command, including any inherited options. Declaration public IEnumerable<CommandOption> GetOptions() Returns Type Description System.Collections.Generic.IEnumerable < CommandOption > Command line options. | Improve this Doc View Source HandleParseResult(ParseResult) Handle the result of parsing command line arguments. Declaration protected virtual void HandleParseResult(ParseResult parseResult) Parameters Type Name Description ParseResult parseResult The parse result. | Improve this Doc View Source HelpOption(String) Helper method that adds a help option. Declaration public CommandOption HelpOption(string template) Parameters Type Name Description System.String template Returns Type Description CommandOption | Improve this Doc View Source HelpOption(String, Boolean) Helper method that adds a help option. Declaration public CommandOption HelpOption(string template, bool inherited) Parameters Type Name Description System.String template System.Boolean inherited Returns Type Description CommandOption | Improve this Doc View Source OnExecute(Func<Int32>) Defines a callback for when this command is invoked. Declaration public void OnExecute(Func<int> invoke) Parameters Type Name Description System.Func < System.Int32 > invoke | Improve this Doc View Source OnExecute(Func<Task<Int32>>) Defines an asynchronous callback. Declaration public void OnExecute(Func<Task<int>> invoke) Parameters Type Name Description System.Func < System.Threading.Tasks.Task < System.Int32 >> invoke | Improve this Doc View Source OnParsingComplete(Action<ParseResult>) Adds an action to be invoked when all command line arguments have been parsed and validated. Declaration public void OnParsingComplete(Action<ParseResult> action) Parameters Type Name Description System.Action < ParseResult > action The action to be invoked | Improve this Doc View Source Option(String, String, CommandOptionType) Adds a command-line option. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType) Parameters Type Name Description System.String template System.String description CommandOptionType optionType Returns Type Description CommandOption | Improve this Doc View Source Option(String, String, CommandOptionType, Action<CommandOption>) Adds a command-line option. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration) Parameters Type Name Description System.String template System.String description CommandOptionType optionType System.Action < CommandOption > configuration Returns Type Description CommandOption | Improve this Doc View Source Option(String, String, CommandOptionType, Action<CommandOption>, Boolean) Adds a command line option. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration, bool inherited) Parameters Type Name Description System.String template System.String description CommandOptionType optionType System.Action < CommandOption > configuration System.Boolean inherited Returns Type Description CommandOption | Improve this Doc View Source Option(String, String, CommandOptionType, Boolean) Adds a command-line option. Declaration public CommandOption Option(string template, string description, CommandOptionType optionType, bool inherited) Parameters Type Name Description System.String template System.String description CommandOptionType optionType System.Boolean inherited Returns Type Description CommandOption | Improve this Doc View Source Option<T>(String, String, CommandOptionType, Action<CommandOption>, Boolean) Adds a command line option with values that should be parsable into T . Declaration public CommandOption<T> Option<T>(string template, string description, CommandOptionType optionType, Action<CommandOption> configuration, bool inherited) Parameters Type Name Description System.String template System.String description CommandOptionType optionType System.Action < CommandOption > configuration System.Boolean inherited Returns Type Description CommandOption <T> The option Type Parameters Name Description T The type of the values on the option | Improve this Doc View Source Parse(String[]) Parses an array of strings, matching them against Options , Arguments , and Commands . Declaration public ParseResult Parse(params string[] args) Parameters Type Name Description System.String [] args Command line arguments. Returns Type Description ParseResult The result of parsing. | Improve this Doc View Source ShowHelp() Show full help. Declaration public void ShowHelp() | Improve this Doc View Source ShowHelp(String) This method has been marked as obsolete and will be removed in a future version. The recommended replacement is ShowHelp() . Declaration [Obsolete(\"This method has been marked as obsolete and will be removed in a future version.The recommended replacement is ShowHelp()\")] public void ShowHelp(string commandName = null) Parameters Type Name Description System.String commandName The subcommand for which to show help. Leave null to show for the current command. | Improve this Doc View Source ShowHint() Show short hint that reminds users to use help option. Declaration public void ShowHint() | Improve this Doc View Source ShowRootCommandFullNameAndVersion() Traverses up Parent and displays the result of GetFullNameAndVersion() . Declaration public void ShowRootCommandFullNameAndVersion() | Improve this Doc View Source ShowVersion() Displays version information that includes FullName and LongVersionGetter . Declaration public void ShowVersion() | Improve this Doc View Source VersionOption(String, Func<String>, Func<String>) Helper method that adds a version option. Declaration public CommandOption VersionOption(string template, Func<string> shortFormVersionGetter, Func<string> longFormVersionGetter = null) Parameters Type Name Description System.String template System.Func < System.String > shortFormVersionGetter System.Func < System.String > longFormVersionGetter Returns Type Description CommandOption | Improve this Doc View Source VersionOption(String, String, String) Helper method that adds a version option from known versions strings. Declaration public CommandOption VersionOption(string template, string shortFormVersion, string longFormVersion = null) Parameters Type Name Description System.String template System.String shortFormVersion System.String longFormVersion Returns Type Description CommandOption Explicit Interface Implementations | Improve this Doc View Source IServiceProvider.GetService(Type) Declaration object IServiceProvider.GetService(Type serviceType) Parameters Type Name Description System.Type serviceType Returns Type Description System.Object Implements System.IServiceProvider Extension Methods CommandLineApplicationExtensions.Argument<T>(CommandLineApplication, String, String, Boolean) CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType) CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Boolean) CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Action<CommandOption>) CommandLineApplicationExtensions.HelpOption(CommandLineApplication) CommandLineApplicationExtensions.HelpOption(CommandLineApplication, Boolean) CommandLineApplicationExtensions.VerboseOption(CommandLineApplication) CommandLineApplicationExtensions.VerboseOption(CommandLineApplication, String) CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Func<Task>) CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Action) CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>) CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Action<ValidationResult>) CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly) ValidationExtensions.OnValidate(CommandLineApplication, Func<ValidationContext, ValidationResult>)"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandArgument-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandArgument-1.html",
    "title": "Class CommandArgument<T>",
    "keywords": "Class CommandArgument<T> Represents one or many positional command line arguments. Arguments are parsed in the order in which Arguments lists them. Compare to CommandOption . The raw value must be parsable into type T Inheritance System.Object CommandArgument CommandArgument<T> Inherited Members CommandArgument.Name CommandArgument.ShowInHelpText CommandArgument.Description CommandArgument.Values CommandArgument.MultipleValues CommandArgument.Value CommandArgument.Validators System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandArgument<T> : CommandArgument, IInternalCommandParamOfT Type Parameters Name Description T Constructors | Improve this Doc View Source CommandArgument(IValueParser<T>) Initializes a new instance of CommandArgument<T> Declaration public CommandArgument(IValueParser<T> valueParser) Parameters Type Name Description IValueParser <T> valueParser The value parser. Properties | Improve this Doc View Source ParsedValue The parsed value. Declaration public T ParsedValue { get; } Property Value Type Description T | Improve this Doc View Source ParsedValues All parsed values; Declaration public IReadOnlyList<T> ParsedValues { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList <T> Extension Methods ValidationExtensions.IsRequired(CommandArgument, Boolean, String) ValidationExtensions.Accepts(CommandArgument, Action<IArgumentValidationBuilder>) ValidationExtensions.Accepts(CommandArgument) ValidationExtensions.Accepts<T>(CommandArgument<T>, Action<IArgumentValidationBuilder<T>>) ValidationExtensions.Accepts<T>(CommandArgument<T>) ValidationExtensions.OnValidate(CommandArgument, Func<ValidationContext, ValidationResult>)"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.DelegateValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.DelegateValidator.html",
    "title": "Class DelegateValidator",
    "keywords": "Class DelegateValidator Implements a validator with an anonymous function Inheritance System.Object DelegateValidator Implements ICommandValidator IArgumentValidator IOptionValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class DelegateValidator : ICommandValidator, IArgumentValidator, IOptionValidator Constructors | Improve this Doc View Source DelegateValidator(Func<ValidationContext, ValidationResult>) Initializes an instance of DelegateValidator . Declaration public DelegateValidator(Func<ValidationContext, ValidationResult> validator) Parameters Type Name Description System.Func < System.ComponentModel.DataAnnotations.ValidationContext , System.ComponentModel.DataAnnotations.ValidationResult > validator Explicit Interface Implementations | Improve this Doc View Source IArgumentValidator.GetValidationResult(CommandArgument, ValidationContext) Declaration ValidationResult IArgumentValidator.GetValidationResult(CommandArgument argument, ValidationContext context) Parameters Type Name Description CommandArgument argument System.ComponentModel.DataAnnotations.ValidationContext context Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult | Improve this Doc View Source ICommandValidator.GetValidationResult(CommandLineApplication, ValidationContext) Declaration ValidationResult ICommandValidator.GetValidationResult(CommandLineApplication command, ValidationContext context) Parameters Type Name Description CommandLineApplication command System.ComponentModel.DataAnnotations.ValidationContext context Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult | Improve this Doc View Source IOptionValidator.GetValidationResult(CommandOption, ValidationContext) Declaration ValidationResult IOptionValidator.GetValidationResult(CommandOption option, ValidationContext context) Parameters Type Name Description CommandOption option System.ComponentModel.DataAnnotations.ValidationContext context Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult Implements ICommandValidator IArgumentValidator IOptionValidator"
  },
  "api/McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Validation.AttributeValidator.html",
    "title": "Class AttributeValidator",
    "keywords": "Class AttributeValidator A validator that uses a System.ComponentModel.DataAnnotations.ValidationAttribute to validate a command line option or argument. Inheritance System.Object AttributeValidator Implements IValidator IOptionValidator IArgumentValidator Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Validation Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class AttributeValidator : IValidator, IOptionValidator, IArgumentValidator Constructors | Improve this Doc View Source AttributeValidator(ValidationAttribute) Initializes an instance of AttributeValidator . Declaration public AttributeValidator(ValidationAttribute attribute) Parameters Type Name Description System.ComponentModel.DataAnnotations.ValidationAttribute attribute Methods | Improve this Doc View Source GetValidationResult(CommandArgument, ValidationContext) Gets the validation result for a command line argument. Declaration public ValidationResult GetValidationResult(CommandArgument argument, ValidationContext context) Parameters Type Name Description CommandArgument argument System.ComponentModel.DataAnnotations.ValidationContext context Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult | Improve this Doc View Source GetValidationResult(CommandOption, ValidationContext) Gets the validation result for a command line option. Declaration public ValidationResult GetValidationResult(CommandOption option, ValidationContext context) Parameters Type Name Description CommandOption option System.ComponentModel.DataAnnotations.ValidationContext context Returns Type Description System.ComponentModel.DataAnnotations.ValidationResult Implements IValidator IOptionValidator IArgumentValidator"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.html",
    "title": "Namespace McMaster.Extensions.CommandLineUtils.Conventions",
    "keywords": "Namespace McMaster.Extensions.CommandLineUtils.Conventions Classes AppNameFromEntryAssemblyConvention Sets Name using the name of the entry assembly to the current application. It is only applied if the name is null. ArgumentAttributeConvention Adds a CommandArgument for each ArgumentAttribute on the model type for CommandLineApplication<TModel> . CommandAttributeConvention Adds settings from CommandAttribute set on the model type for CommandLineApplication<TModel> . ConstructorInjectionConvention Uses an instance of System.IServiceProvider to call constructors when creating models. ConventionContext The context in which a convention is applied. ExecuteMethodConvention Sets Invoke to call a method named OnExecute or OnExecuteAsync on the model type of CommandLineApplication<TModel> . HelpOptionAttributeConvention Sets OptionHelp based on the usage of HelpOptionAttribute . OptionAttributeConvention Adds an CommandOption to match each usage of OptionAttribute on the model type of CommandLineApplication<TModel> . OptionAttributeConventionBase<TAttribute> Shared implementation for adding conventions based on OptionAttributeBase . ParentPropertyConvention Sets a property named Parent on the model type to the value of the model of the parent command. RemainingArgsPropertyConvention Sets a property named RemainingArguments or RemainingArgs on the model type on CommandLineApplication<TModel> to the value of RemainingArguments . SubcommandAttributeConvention Creates a subcommand for each SubcommandAttribute on the model type of CommandLineApplication<TModel> . SubcommandPropertyConvention Sets a property named Subcommand to the value of the selected subcommand model type of CommandLineApplication<TModel> . ValidationErrorMethodConvention Invokes a method named OnValidationError on the model type of CommandLineApplication<TModel> to handle validation errors. VersionOptionAttributeConvention Sets OptionVersion using settings from VersionOptionAttribute on the model type of CommandLineApplication<TModel> . VersionOptionFromMemberAttributeConvention Sets OptionVersion using settings from VersionOptionFromMemberAttribute on the model type of CommandLineApplication<TModel> . Interfaces IConvention Defines a convention for an instance of CommandLineApplication<TModel> . IConventionBuilder Builds a collection of conventions."
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionFromMemberAttributeConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.VersionOptionFromMemberAttributeConvention.html",
    "title": "Class VersionOptionFromMemberAttributeConvention",
    "keywords": "Class VersionOptionFromMemberAttributeConvention Sets OptionVersion using settings from VersionOptionFromMemberAttribute on the model type of CommandLineApplication<TModel> . Inheritance System.Object VersionOptionFromMemberAttributeConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class VersionOptionFromMemberAttributeConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.ParentPropertyConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.ParentPropertyConvention.html",
    "title": "Class ParentPropertyConvention",
    "keywords": "Class ParentPropertyConvention Sets a property named Parent on the model type to the value of the model of the parent command. Inheritance System.Object ParentPropertyConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ParentPropertyConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.ConsoleReporter.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ConsoleReporter.html",
    "title": "Class ConsoleReporter",
    "keywords": "Class ConsoleReporter A thread-safe reporter that forwards to console output. Inheritance System.Object ConsoleReporter Implements IReporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ConsoleReporter : IReporter Constructors | Improve this Doc View Source ConsoleReporter(IConsole) Initializes an instance of ConsoleReporter . Declaration public ConsoleReporter(IConsole console) Parameters Type Name Description IConsole console | Improve this Doc View Source ConsoleReporter(IConsole, Boolean, Boolean) Initializes an instance of ConsoleReporter . Declaration public ConsoleReporter(IConsole console, bool verbose, bool quiet) Parameters Type Name Description IConsole console System.Boolean verbose When false, Verbose does not display output. System.Boolean quiet When true, only Warn and Error display output Properties | Improve this Doc View Source Console The console to write to. Declaration protected IConsole Console { get; } Property Value Type Description IConsole | Improve this Doc View Source IsQuiet Is verbose output and regular output hidden. Declaration public bool IsQuiet { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source IsVerbose Is verbose output displayed. Declaration public bool IsVerbose { get; set; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Error(String) Writes a message in System.ConsoleColor.Red to Error . Declaration public virtual void Error(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Output(String) Writes a message to Out . Declaration public virtual void Output(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Verbose(String) Writes a message in System.ConsoleColor.DarkGray to Out . Declaration public virtual void Verbose(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Warn(String) Writes a message in System.ConsoleColor.Yellow to Out . Declaration public virtual void Warn(string message) Parameters Type Name Description System.String message | Improve this Doc View Source WriteLine(TextWriter, String, Nullable<ConsoleColor>, Nullable<ConsoleColor>) Write a line with color. Declaration protected virtual void WriteLine(TextWriter writer, string message, ConsoleColor? foregroundColor, ConsoleColor? backgroundColor = default (ConsoleColor? )) Parameters Type Name Description System.IO.TextWriter writer System.String message System.Nullable < System.ConsoleColor > foregroundColor System.Nullable < System.ConsoleColor > backgroundColor Implements IReporter"
  },
  "api/McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Abstractions.IModelAccessor.html",
    "title": "Interface IModelAccessor",
    "keywords": "Interface IModelAccessor Provides access to a command line application model. Namespace : McMaster.Extensions.CommandLineUtils.Abstractions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IModelAccessor Methods | Improve this Doc View Source GetModel() Gets the model. Declaration object GetModel() Returns Type Description System.Object The model. | Improve this Doc View Source GetModelType() Gets the type of the model. Declaration Type GetModelType() Returns Type Description System.Type The type."
  },
  "api/McMaster.Extensions.CommandLineUtils.ConsoleExtensions.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ConsoleExtensions.html",
    "title": "Class ConsoleExtensions",
    "keywords": "Class ConsoleExtensions Helper methods for IConsole . Inheritance System.Object ConsoleExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public static class ConsoleExtensions Methods | Improve this Doc View Source Write(IConsole, Boolean) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, bool value) Parameters Type Name Description IConsole console The console. System.Boolean value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Char) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, char value) Parameters Type Name Description IConsole console The console. System.Char value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Char[]) Formats and writes an array of characters. Declaration public static IConsole Write(this IConsole console, char[] buffer) Parameters Type Name Description IConsole console The console. System.Char [] buffer The buffer. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Char[], Int32, Int32) Formats and writes a portion of a character buffer. Declaration public static IConsole Write(this IConsole console, char[] buffer, int index, int count) Parameters Type Name Description IConsole console The console. System.Char [] buffer The buffer. System.Int32 index The start index. System.Int32 count The number of characters to write. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Decimal) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, decimal value) Parameters Type Name Description IConsole console The console. System.Decimal value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Double) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, double value) Parameters Type Name Description IConsole console The console. System.Double value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Int32) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, int value) Parameters Type Name Description IConsole console The console. System.Int32 value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Int64) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, long value) Parameters Type Name Description IConsole console The console. System.Int64 value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Object) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, object value) Parameters Type Name Description IConsole console The console. System.Object value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, Single) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, float value) Parameters Type Name Description IConsole console The console. System.Single value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, String) Writes a string console output. Declaration public static IConsole Write(this IConsole console, string value) Parameters Type Name Description IConsole console The console. System.String value The value. Returns Type Description IConsole the console. | Improve this Doc View Source Write(IConsole, String, Object) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, string format, object arg0) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object arg0 The first argument to replace in the format string. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, String, Object, Object) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, string format, object arg0, object arg1) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object arg0 The first argument to replace in the format string. System.Object arg1 The second argument to replace in the format string. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, String, Object, Object, Object) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, string format, object arg0, object arg1, object arg2) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object arg0 The first argument to replace in the format string. System.Object arg1 The second argument to replace in the format string. System.Object arg2 The third argument to replace in the format string. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, String, Object[]) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, string format, params object[] arg) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object [] arg Argument used to format. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, UInt32) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, uint value) Parameters Type Name Description IConsole console The console. System.UInt32 value The value. Returns Type Description IConsole The console. | Improve this Doc View Source Write(IConsole, UInt64) Formats and writes a value. Declaration public static IConsole Write(this IConsole console, ulong value) Parameters Type Name Description IConsole console The console. System.UInt64 value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole) Writes an empty line. Declaration public static IConsole WriteLine(this IConsole console) Parameters Type Name Description IConsole console The console. Returns Type Description IConsole the console. | Improve this Doc View Source WriteLine(IConsole, Boolean) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, bool value) Parameters Type Name Description IConsole console The console. System.Boolean value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Char) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, char value) Parameters Type Name Description IConsole console The console. System.Char value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Char[]) Formats and writes an array of characters as a new line. Declaration public static IConsole WriteLine(this IConsole console, char[] buffer) Parameters Type Name Description IConsole console The console. System.Char [] buffer The buffer. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Char[], Int32, Int32) Formats and writes a portion of a character buffer as a new line. Declaration public static IConsole WriteLine(this IConsole console, char[] buffer, int index, int count) Parameters Type Name Description IConsole console The console. System.Char [] buffer The buffer. System.Int32 index The start index. System.Int32 count The number of characters to write. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Decimal) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, decimal value) Parameters Type Name Description IConsole console The console. System.Decimal value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Double) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, double value) Parameters Type Name Description IConsole console The console. System.Double value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Int32) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, int value) Parameters Type Name Description IConsole console The console. System.Int32 value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Int64) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, long value) Parameters Type Name Description IConsole console The console. System.Int64 value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Object) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, object value) Parameters Type Name Description IConsole console The console. System.Object value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, Single) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, float value) Parameters Type Name Description IConsole console The console. System.Single value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, String) Writes a string followed by a line terminator. Declaration public static IConsole WriteLine(this IConsole console, string value) Parameters Type Name Description IConsole console The console. System.String value The value. Returns Type Description IConsole the console. | Improve this Doc View Source WriteLine(IConsole, String, Object) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, string format, object arg0) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object arg0 The first argument to replace in the format string. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, String, Object, Object) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, string format, object arg0, object arg1) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object arg0 The first argument to replace in the format string. System.Object arg1 The second argument to replace in the format string. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, String, Object, Object, Object) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, string format, object arg0, object arg1, object arg2) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object arg0 The first argument to replace in the format string. System.Object arg1 The second argument to replace in the format string. System.Object arg2 The third argument to replace in the format string. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, String, Object[]) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, string format, params object[] arg) Parameters Type Name Description IConsole console The console. System.String format The format string. System.Object [] arg Argument used to format. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, UInt32) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, uint value) Parameters Type Name Description IConsole console The console. System.UInt32 value The value. Returns Type Description IConsole The console. | Improve this Doc View Source WriteLine(IConsole, UInt64) Formats and writes a value as a new line. Declaration public static IConsole WriteLine(this IConsole console, ulong value) Parameters Type Name Description IConsole console The console. System.UInt64 value The value. Returns Type Description IConsole The console."
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandOption.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandOption.html",
    "title": "Class CommandOption",
    "keywords": "Class CommandOption Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to CommandArgument . Inheritance System.Object CommandOption CommandOption<T> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandOption Constructors | Improve this Doc View Source CommandOption(String, CommandOptionType) Initializes a new CommandOption . Declaration public CommandOption(string template, CommandOptionType optionType) Parameters Type Name Description System.String template The template string. This is parsed into ShortName and LongName . CommandOptionType optionType The option type. Properties | Improve this Doc View Source Description A description of this option to show in generated help text. Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Inherited Determines if subcommands added to Commands should also have access to this option. Declaration public bool Inherited { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source LongName The long command line flag used to identify this option. On command line, this is preceeded by a double dash: '--{LongName}'. Declaration public string LongName { get; set; } Property Value Type Description System.String | Improve this Doc View Source OptionType Defines the type of the option. Declaration public CommandOptionType OptionType { get; } Property Value Type Description CommandOptionType | Improve this Doc View Source ShortName The short command line flag used to identify this option. On command line, this is preceeded by a single '-{ShortName}'. Declaration public string ShortName { get; set; } Property Value Type Description System.String | Improve this Doc View Source ShowInHelpText Determines if this option should be shown in generated help text. Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source SymbolName Can be used in addition to ShortName to add a single, non-English character. Example \"-?\". Declaration public string SymbolName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Template The argument template. Declaration public string Template { get; set; } Property Value Type Description System.String | Improve this Doc View Source Validators A collection of validators that execute before invoking OnExecute(Func<Int32>) . When validation fails, ValidationErrorHandler is invoked. Declaration public ICollection<IOptionValidator> Validators { get; } Property Value Type Description System.Collections.Generic.ICollection < IOptionValidator > | Improve this Doc View Source ValueName The name of value(s) shown in help text when OptionType is not NoValue . Declaration public string ValueName { get; set; } Property Value Type Description System.String | Improve this Doc View Source Values Any values found during parsing, if any. Declaration public List<string> Values { get; } Property Value Type Description System.Collections.Generic.List < System.String > Methods | Improve this Doc View Source HasValue() True when Values is not empty. Declaration public bool HasValue() Returns Type Description System.Boolean | Improve this Doc View Source TryParse(String) Attempt to parse the value that follows after the flag. Declaration public bool TryParse(string value) Parameters Type Name Description System.String value Returns Type Description System.Boolean | Improve this Doc View Source Value() Returns the first element of Values , if any. Declaration public string Value() Returns Type Description System.String Extension Methods ValidationExtensions.IsRequired(CommandOption, Boolean, String) ValidationExtensions.Accepts(CommandOption, Action<IOptionValidationBuilder>) ValidationExtensions.Accepts(CommandOption) ValidationExtensions.OnValidate(CommandOption, Func<ValidationContext, ValidationResult>)"
  },
  "api/McMaster.Extensions.CommandLineUtils.CommandLineApplication-1.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.CommandLineApplication-1.html",
    "title": "Class CommandLineApplication<TModel>",
    "keywords": "Class CommandLineApplication<TModel> Describes a set of command line arguments, options, and execution behavior using a type of TModel to model the application. Inheritance System.Object CommandLineApplication CommandLineApplication<TModel> Implements System.IServiceProvider IModelAccessor System.IDisposable Inherited Members CommandLineApplication.Parent CommandLineApplication.HelpTextGenerator CommandLineApplication.Name CommandLineApplication.FullName CommandLineApplication.Description CommandLineApplication.ShowInHelpText CommandLineApplication.ExtendedHelpText CommandLineApplication.Options CommandLineApplication.OptionHelp CommandLineApplication.OptionVersion CommandLineApplication.Arguments CommandLineApplication.RemainingArguments CommandLineApplication.ThrowOnUnexpectedArgument CommandLineApplication.IsShowingInformation CommandLineApplication.Invoke CommandLineApplication.LongVersionGetter CommandLineApplication.ShortVersionGetter CommandLineApplication.Commands CommandLineApplication.AllowArgumentSeparator CommandLineApplication.ResponseFileHandling CommandLineApplication.OptionsComparison CommandLineApplication.ValueParsers CommandLineApplication.WorkingDirectory CommandLineApplication.Out CommandLineApplication.Error CommandLineApplication.GetOptions() CommandLineApplication.Command(String, Action<CommandLineApplication>, Boolean) CommandLineApplication.Command<TModel>(String, Action<CommandLineApplication<TModel>>, Boolean) CommandLineApplication.Option(String, String, CommandOptionType) CommandLineApplication.Option(String, String, CommandOptionType, Boolean) CommandLineApplication.Option(String, String, CommandOptionType, Action<CommandOption>) CommandLineApplication.Option(String, String, CommandOptionType, Action<CommandOption>, Boolean) CommandLineApplication.Option<T>(String, String, CommandOptionType, Action<CommandOption>, Boolean) CommandLineApplication.Argument(String, String, Boolean) CommandLineApplication.Argument(String, String, Action<CommandArgument>, Boolean) CommandLineApplication.Argument<T>(String, String, Action<CommandArgument>, Boolean) CommandLineApplication.OnExecute(Func<Int32>) CommandLineApplication.OnExecute(Func<Task<Int32>>) CommandLineApplication.OnParsingComplete(Action<ParseResult>) CommandLineApplication.Parse(String[]) CommandLineApplication.Execute(String[]) CommandLineApplication.HelpOption(String) CommandLineApplication.HelpOption(String, Boolean) CommandLineApplication.VersionOption(String, String, String) CommandLineApplication.VersionOption(String, Func<String>, Func<String>) CommandLineApplication.ShowHint() CommandLineApplication.ShowHelp() CommandLineApplication.ShowHelp(String) CommandLineApplication.GetHelpText() CommandLineApplication.GetHelpText(String) CommandLineApplication.ShowVersion() CommandLineApplication.GetFullNameAndVersion() CommandLineApplication.ShowRootCommandFullNameAndVersion() CommandLineApplication.Conventions CommandLineApplication.IServiceProvider.GetService(Type) CommandLineApplication.Execute<TApp>(CommandLineContext) CommandLineApplication.Execute<TApp>(String[]) CommandLineApplication.Execute<TApp>(IConsole, String[]) CommandLineApplication.ExecuteAsync<TApp>(String[]) CommandLineApplication.ExecuteAsync<TApp>(IConsole, String[]) CommandLineApplication.ExecuteAsync<TApp>(CommandLineContext) CommandLineApplication.ValidationErrorHandler CommandLineApplication.Validators System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class CommandLineApplication<TModel> : CommandLineApplication, IServiceProvider, IModelAccessor, IDisposable where TModel : class Type Parameters Name Description TModel Constructors | Improve this Doc View Source CommandLineApplication(IHelpTextGenerator, IConsole, String, Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IHelpTextGenerator helpTextGenerator, IConsole console, string workingDirectory, bool throwOnUnexpectedArg) Parameters Type Name Description IHelpTextGenerator helpTextGenerator The help text generator to use. IConsole console The console implementation to use. System.String workingDirectory The current working directory. System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . | Improve this Doc View Source CommandLineApplication(IConsole) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IConsole console) Parameters Type Name Description IConsole console The console implementation to use. | Improve this Doc View Source CommandLineApplication(IConsole, String, Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(IConsole console, string workingDirectory, bool throwOnUnexpectedArg) Parameters Type Name Description IConsole console The console implementation to use. System.String workingDirectory The current working directory. System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . | Improve this Doc View Source CommandLineApplication(Boolean) Initializes a new instance of CommandLineApplication . Declaration public CommandLineApplication(bool throwOnUnexpectedArg = true) Parameters Type Name Description System.Boolean throwOnUnexpectedArg Initial value for ThrowOnUnexpectedArgument . Properties | Improve this Doc View Source Model An instance of the model associated with the command line application. Declaration public TModel Model { get; } Property Value Type Description TModel | Improve this Doc View Source ModelFactory Defines the function that produces an instance of TModel . Declaration public Func<TModel> ModelFactory { get; set; } Property Value Type Description System.Func <TModel> Methods | Improve this Doc View Source CreateModel() Create an instance of TModel . Declaration protected virtual TModel CreateModel() Returns Type Description TModel An instance of the context. | Improve this Doc View Source HandleParseResult(ParseResult) Handle the result of parsing command line arguments. Declaration protected override void HandleParseResult(ParseResult parseResult) Parameters Type Name Description ParseResult parseResult The parse result. Overrides CommandLineApplication.HandleParseResult(ParseResult) Explicit Interface Implementations | Improve this Doc View Source IModelAccessor.GetModel() Declaration object IModelAccessor.GetModel() Returns Type Description System.Object | Improve this Doc View Source IModelAccessor.GetModelType() Declaration Type IModelAccessor.GetModelType() Returns Type Description System.Type | Improve this Doc View Source IDisposable.Dispose() Declaration void IDisposable.Dispose() Implements System.IServiceProvider IModelAccessor System.IDisposable Extension Methods CommandLineApplicationExtensions.Argument<T>(CommandLineApplication, String, String, Boolean) CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType) CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Boolean) CommandLineApplicationExtensions.Option<T>(CommandLineApplication, String, String, CommandOptionType, Action<CommandOption>) CommandLineApplicationExtensions.HelpOption(CommandLineApplication) CommandLineApplicationExtensions.HelpOption(CommandLineApplication, Boolean) CommandLineApplicationExtensions.VerboseOption(CommandLineApplication) CommandLineApplicationExtensions.VerboseOption(CommandLineApplication, String) CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Func<Task>) CommandLineApplicationExtensions.OnExecute(CommandLineApplication, Action) CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Func<ValidationResult, Int32>) CommandLineApplicationExtensions.OnValidationError(CommandLineApplication, Action<ValidationResult>) CommandLineApplicationExtensions.VersionOptionFromAssemblyAttributes(CommandLineApplication, Assembly) ValidationExtensions.OnValidate(CommandLineApplication, Func<ValidationContext, ValidationResult>)"
  },
  "api/McMaster.Extensions.CommandLineUtils.ArgumentAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.ArgumentAttribute.html",
    "title": "Class ArgumentAttribute",
    "keywords": "Class ArgumentAttribute Represents one or many positional command line arguments. Arguments are parsed based the Order given. Compare to OptionAttribute . Inheritance System.Object System.Attribute ArgumentAttribute Inherited Members System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property)] public sealed class ArgumentAttribute : Attribute Constructors | Improve this Doc View Source ArgumentAttribute(Int32) Initializes a new ArgumentAttribute . Declaration public ArgumentAttribute(int order) Parameters Type Name Description System.Int32 order The order | Improve this Doc View Source ArgumentAttribute(Int32, String) Initializes a new ArgumentAttribute . Declaration public ArgumentAttribute(int order, string name) Parameters Type Name Description System.Int32 order The order System.String name The name | Improve this Doc View Source ArgumentAttribute(Int32, String, String) Initializes a new ArgumentAttribute . Declaration public ArgumentAttribute(int order, string name, string description) Parameters Type Name Description System.Int32 order The order System.String name The name System.String description The description Properties | Improve this Doc View Source Description A description of the argument. Description . Declaration public string Description { get; set; } Property Value Type Description System.String | Improve this Doc View Source Name The name of the argument. Name . Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Order The order in which the argument is expected, relative to other arguments. Declaration public int Order { get; set; } Property Value Type Description System.Int32 | Improve this Doc View Source ShowInHelpText Determines if the argument appears in the generated help-text. ShowInHelpText . Declaration public bool ShowInHelpText { get; set; } Property Value Type Description System.Boolean"
  },
  "api/McMaster.Extensions.CommandLineUtils.OptionAttribute.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.OptionAttribute.html",
    "title": "Class OptionAttribute",
    "keywords": "Class OptionAttribute Represents one or many command line option that is identified by flag proceeded by '-' or '--'. Options are not positional. Compare to ArgumentAttribute . Inheritance System.Object System.Attribute OptionAttributeBase OptionAttribute Inherited Members OptionAttributeBase.Template OptionAttributeBase.ShortName OptionAttributeBase.LongName OptionAttributeBase.SymbolName OptionAttributeBase.ValueName OptionAttributeBase.Description OptionAttributeBase.ShowInHelpText OptionAttributeBase.Inherited System.Attribute.Equals(System.Object) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetHashCode() System.Attribute.IsDefaultAttribute() System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.Match(System.Object) System.Attribute.TypeId System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax [AttributeUsage(AttributeTargets.Property, AllowMultiple = false)] public sealed class OptionAttribute : OptionAttributeBase Constructors | Improve this Doc View Source OptionAttribute() Initializes a new OptionAttribute . Declaration public OptionAttribute() | Improve this Doc View Source OptionAttribute(CommandOptionType) Initializes a new OptionAttribute . Declaration public OptionAttribute(CommandOptionType optionType) Parameters Type Name Description CommandOptionType optionType The optionType | Improve this Doc View Source OptionAttribute(String) Initializes a new OptionAttribute . Declaration public OptionAttribute(string template) Parameters Type Name Description System.String template The string template. Template . | Improve this Doc View Source OptionAttribute(String, CommandOptionType) Initializes a new OptionAttribute . Declaration public OptionAttribute(string template, CommandOptionType optionType) Parameters Type Name Description System.String template The template CommandOptionType optionType The option type | Improve this Doc View Source OptionAttribute(String, String, CommandOptionType) Initializes a new OptionAttribute . Declaration public OptionAttribute(string template, string description, CommandOptionType optionType) Parameters Type Name Description System.String template The template System.String description The option description CommandOptionType optionType The option type Properties | Improve this Doc View Source OptionType Defines the type of the option. When not set, this will be inferred from the CLR type of the property. OptionType Declaration public CommandOptionType? OptionType { get; set; } Property Value Type Description System.Nullable < CommandOptionType >"
  },
  "api/McMaster.Extensions.CommandLineUtils.NullReporter.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.NullReporter.html",
    "title": "Class NullReporter",
    "keywords": "Class NullReporter A reporter that does nothing. Inheritance System.Object NullReporter Implements IReporter Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class NullReporter : IReporter Properties | Improve this Doc View Source Singleton A shared instance of NullReporter . Declaration public static IReporter Singleton { get; } Property Value Type Description IReporter Methods | Improve this Doc View Source Error(String) Report an error. Declaration public void Error(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Output(String) Report console output. Declaration public void Output(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Verbose(String) Report a verbose message. Declaration public void Verbose(string message) Parameters Type Name Description System.String message | Improve this Doc View Source Warn(String) Report a warning. Declaration public void Warn(string message) Parameters Type Name Description System.String message Implements IReporter"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.ConstructorInjectionConvention.html",
    "title": "Class ConstructorInjectionConvention",
    "keywords": "Class ConstructorInjectionConvention Uses an instance of System.IServiceProvider to call constructors when creating models. Inheritance System.Object ConstructorInjectionConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class ConstructorInjectionConvention : IConvention Constructors | Improve this Doc View Source ConstructorInjectionConvention() Initializes an instance of ConstructorInjectionConvention . Declaration public ConstructorInjectionConvention() | Improve this Doc View Source ConstructorInjectionConvention(IServiceProvider) Initializes an instance of ConstructorInjectionConvention . Declaration public ConstructorInjectionConvention(IServiceProvider additionalServices) Parameters Type Name Description System.IServiceProvider additionalServices Additional services use to inject the constructor of the model Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.Conventions.AppNameFromEntryAssemblyConvention.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.Conventions.AppNameFromEntryAssemblyConvention.html",
    "title": "Class AppNameFromEntryAssemblyConvention",
    "keywords": "Class AppNameFromEntryAssemblyConvention Sets Name using the name of the entry assembly to the current application. It is only applied if the name is null. Inheritance System.Object AppNameFromEntryAssemblyConvention Implements IConvention Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : McMaster.Extensions.CommandLineUtils.Conventions Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public class AppNameFromEntryAssemblyConvention : IConvention Methods | Improve this Doc View Source Apply(ConventionContext) Apply the convention. Declaration public virtual void Apply(ConventionContext context) Parameters Type Name Description ConventionContext context The context in which the convention is applied. Implements IConvention"
  },
  "api/McMaster.Extensions.CommandLineUtils.IConsole.html": {
    "href": "api/McMaster.Extensions.CommandLineUtils.IConsole.html",
    "title": "Interface IConsole",
    "keywords": "Interface IConsole An abstract console. Namespace : McMaster.Extensions.CommandLineUtils Assembly : McMaster.Extensions.CommandLineUtils.dll Syntax public interface IConsole Properties | Improve this Doc View Source BackgroundColor The background color of output. Declaration ConsoleColor BackgroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source Error stderr Declaration TextWriter Error { get; } Property Value Type Description System.IO.TextWriter | Improve this Doc View Source ForegroundColor The foreground color of output. Declaration ConsoleColor ForegroundColor { get; set; } Property Value Type Description System.ConsoleColor | Improve this Doc View Source In stdin Declaration TextReader In { get; } Property Value Type Description System.IO.TextReader | Improve this Doc View Source IsErrorRedirected Is stderr being piped to somewhere? Declaration bool IsErrorRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsInputRedirected Is stdin piped from somewhere? Declaration bool IsInputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsOutputRedirected Is stdout being piped to somewhere? Declaration bool IsOutputRedirected { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Out stdout Declaration TextWriter Out { get; } Property Value Type Description System.IO.TextWriter Methods | Improve this Doc View Source ResetColor() Resets ForegroundColor and BackgroundColor . Declaration void ResetColor() Events | Improve this Doc View Source CancelKeyPress Raised when Ctrl+C is pressed. Declaration event ConsoleCancelEventHandler CancelKeyPress Event Type Type Description System.ConsoleCancelEventHandler Extension Methods ConsoleExtensions.WriteLine(IConsole) ConsoleExtensions.WriteLine(IConsole, String) ConsoleExtensions.WriteLine(IConsole, String, Object[]) ConsoleExtensions.WriteLine(IConsole, String, Object) ConsoleExtensions.WriteLine(IConsole, String, Object, Object) ConsoleExtensions.WriteLine(IConsole, String, Object, Object, Object) ConsoleExtensions.WriteLine(IConsole, UInt64) ConsoleExtensions.WriteLine(IConsole, Boolean) ConsoleExtensions.WriteLine(IConsole, Char) ConsoleExtensions.WriteLine(IConsole, Char[]) ConsoleExtensions.WriteLine(IConsole, Char[], Int32, Int32) ConsoleExtensions.WriteLine(IConsole, Decimal) ConsoleExtensions.WriteLine(IConsole, Double) ConsoleExtensions.WriteLine(IConsole, UInt32) ConsoleExtensions.WriteLine(IConsole, Int32) ConsoleExtensions.WriteLine(IConsole, Object) ConsoleExtensions.WriteLine(IConsole, Single) ConsoleExtensions.WriteLine(IConsole, Int64) ConsoleExtensions.Write(IConsole, String) ConsoleExtensions.Write(IConsole, String, Object[]) ConsoleExtensions.Write(IConsole, String, Object) ConsoleExtensions.Write(IConsole, String, Object, Object) ConsoleExtensions.Write(IConsole, String, Object, Object, Object) ConsoleExtensions.Write(IConsole, UInt32) ConsoleExtensions.Write(IConsole, Decimal) ConsoleExtensions.Write(IConsole, Int32) ConsoleExtensions.Write(IConsole, UInt64) ConsoleExtensions.Write(IConsole, Boolean) ConsoleExtensions.Write(IConsole, Char) ConsoleExtensions.Write(IConsole, Char[]) ConsoleExtensions.Write(IConsole, Char[], Int32, Int32) ConsoleExtensions.Write(IConsole, Double) ConsoleExtensions.Write(IConsole, Int64) ConsoleExtensions.Write(IConsole, Object) ConsoleExtensions.Write(IConsole, Single)"
  },
  "docs/concepts/dependency-injection.html": {
    "href": "docs/concepts/dependency-injection.html",
    "title": "Dependency Injection",
    "keywords": "Dependency Injection CommandLineUtils allow you to use dependency injection to inject dependencies into command constructors at runtime. This gives you the ability to avoid tight coupling between the commands and the services which they depend on. CommandLineUtils has a standard set of services which are available to inject and also allow you to register and inject your own services. Using dependency injection To inject services into a command constructor, you need to specify the services to be injected as parameters for the public constructor of the command. In the example below, the IConsole implementation is injected into the constructor and stored in a field named _console . Later in the program, this is used to write output to the console: [Command(Name = \"di\", Description = \"Dependency Injection sample project\")] [HelpOption] class Program { private readonly IConsole _console; static Task<int> Main(string[] args) => CommandLineApplication.ExecuteAsync<Program>(args); public Program(IConsole console) { _console = console; } private int OnExecute() { _console.WriteLine(\"Hello from your first application\"); return 0; } } Using the standard services CommandLineApplication makes a number of services available by default for injecting into your command constructors. There are the standard services which you can inject: Service Description CommandLineApplication Injects the CommandLineApplication instance. IConsole Injects the IConsole implementation. IEnumerable<CommandOption> Injects the definitions for the options passed to the command. IEnumerable<CommandArgument> Injects the definitions for the arguments passed to the command. CommandLineContext Injects the CommandLineContext which contains information abount the execution context of the command. IServiceProvider ... Command parent type When using sub-commands, you can inject the type of the parent command into the constructor for a sub-command. Using your own services You can register your own services by using the ConstructorInjectionConvention and making use of the Microsoft.Extensions.DependencyInjection NuGet package to contruct services. In the example below, we have defined a service named IMyService with a single method named Invoke : interface IMyService { void Invoke(); } The implementation of this service is done in MyServiceImplementation , which will write a string to the console. Also, note that an instance of IConsole is injected into the MyServiceImplementation constructor. class MyServiceImplementation : IMyService { private readonly IConsole _console; public MyServiceImplementation(IConsole console) { _console = console; } public void Invoke() { _console.WriteLine(\"Hello dependency injection!\"); } } You can register your own services by creating an instance of ServiceCollection and adding the services to the collection. A service provider is then created by calling the BuildServiceProvider method: var services = new ServiceCollection() .AddSingleton<IMyService, MyServiceImplementation>() .AddSingleton<IConsole>(PhysicalConsole.Singleton) .BuildServiceProvider(); Note Take note that standard services which need to be injected into your custom services, such as IConsole which needs to be injected into the MyServiceImplementation constructor, needs to be added to the service collection as well. Next, you can call add the constructor injection convention by calling UseConstructorInjection , passing the service provider which was previously created. var app = new CommandLineApplication<Program>(); app.Conventions .UseDefaultConventions() .UseConstructorInjection(services); Below is the full source code for the custom services example. Notice that instance of IMyService which will be injected into the Program constructor thanks to the dependency injection. [Command(Name = \"di\", Description = \"Dependency Injection sample project\")] [HelpOption] class Program { public static int Main(string[] args) { var services = new ServiceCollection() .AddSingleton<IMyService, MyServiceImplementation>() .AddSingleton<IConsole>(PhysicalConsole.Singleton) .BuildServiceProvider(); var app = new CommandLineApplication<Program>(); app.Conventions .UseDefaultConventions() .UseConstructorInjection(services); return app.Execute(args); } private readonly IMyService _myService; public Program(IMyService myService) { _myService = myService; } private void OnExecute() { _myService.Invoke(); } }"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference",
    "keywords": "API Reference McMaster.Extensions.CommandLineUtils supports three target frameworks. .NET Standard 2.0 .NET Standard 1.6 .NET Framework 4.5 The API is almost identical between all of the frameworks. The main entry point for most command line applications is CommandLineApplication . For apps built using attributes, these are the most common attributes used: OptionAttribute ArgumentAttribute CommandAttribute SubcommandAttribute HelpOptionAttribute Other commonly used types include DotNetExe Prompt ArgumentEscaper IConsole"
  }
}